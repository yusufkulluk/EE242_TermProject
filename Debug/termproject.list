
termproject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a18  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08001ad8  08001ad8  00002ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b4c  08001b4c  00003054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001b4c  08001b4c  00003054  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001b4c  08001b4c  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b4c  08001b4c  00002b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001b50  08001b50  00002b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08001b54  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000054  08001ba8  00003054  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08001ba8  0000307c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 12 .debug_info   000033d2  00000000  00000000  0000307c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010f5  00000000  00000000  0000644e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000420  00000000  00000000  00007548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002f0  00000000  00000000  00007968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013ab0  00000000  00000000  00007c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006099  00000000  00000000  0001b708  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00078540  00000000  00000000  000217a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00099ce1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ca8  00000000  00000000  00099d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0009a9cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000054 	.word	0x20000054
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001ac0 	.word	0x08001ac0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000058 	.word	0x20000058
 8000104:	08001ac0 	.word	0x08001ac0

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <keypad_get_key>:
    {'*','7','4','1'}
};


char keypad_get_key(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
    for (int row = 0; row < ROW_NUM; row++)
 800023a:	2300      	movs	r3, #0
 800023c:	60fb      	str	r3, [r7, #12]
 800023e:	e044      	b.n	80002ca <keypad_get_key+0x96>
    {
        // Tüm satırları 1 yap
        for (int i = 0; i < ROW_NUM; i++)
 8000240:	2300      	movs	r3, #0
 8000242:	60bb      	str	r3, [r7, #8]
 8000244:	e00e      	b.n	8000264 <keypad_get_key+0x30>
        {
            HAL_GPIO_WritePin(row_ports[i], row_pins[i], GPIO_PIN_SET);
 8000246:	4b25      	ldr	r3, [pc, #148]	@ (80002dc <keypad_get_key+0xa8>)
 8000248:	68ba      	ldr	r2, [r7, #8]
 800024a:	0092      	lsls	r2, r2, #2
 800024c:	58d0      	ldr	r0, [r2, r3]
 800024e:	4b24      	ldr	r3, [pc, #144]	@ (80002e0 <keypad_get_key+0xac>)
 8000250:	68ba      	ldr	r2, [r7, #8]
 8000252:	0052      	lsls	r2, r2, #1
 8000254:	5ad3      	ldrh	r3, [r2, r3]
 8000256:	2201      	movs	r2, #1
 8000258:	0019      	movs	r1, r3
 800025a:	f000 fe46 	bl	8000eea <HAL_GPIO_WritePin>
        for (int i = 0; i < ROW_NUM; i++)
 800025e:	68bb      	ldr	r3, [r7, #8]
 8000260:	3301      	adds	r3, #1
 8000262:	60bb      	str	r3, [r7, #8]
 8000264:	68bb      	ldr	r3, [r7, #8]
 8000266:	2b03      	cmp	r3, #3
 8000268:	dded      	ble.n	8000246 <keypad_get_key+0x12>
        }

        // Sadece seçili satırı 0 yap
        HAL_GPIO_WritePin(row_ports[row], row_pins[row], GPIO_PIN_RESET);
 800026a:	4b1c      	ldr	r3, [pc, #112]	@ (80002dc <keypad_get_key+0xa8>)
 800026c:	68fa      	ldr	r2, [r7, #12]
 800026e:	0092      	lsls	r2, r2, #2
 8000270:	58d0      	ldr	r0, [r2, r3]
 8000272:	4b1b      	ldr	r3, [pc, #108]	@ (80002e0 <keypad_get_key+0xac>)
 8000274:	68fa      	ldr	r2, [r7, #12]
 8000276:	0052      	lsls	r2, r2, #1
 8000278:	5ad3      	ldrh	r3, [r2, r3]
 800027a:	2200      	movs	r2, #0
 800027c:	0019      	movs	r1, r3
 800027e:	f000 fe34 	bl	8000eea <HAL_GPIO_WritePin>

        for (int col = 0; col < COL_NUM; col++)
 8000282:	2300      	movs	r3, #0
 8000284:	607b      	str	r3, [r7, #4]
 8000286:	e01a      	b.n	80002be <keypad_get_key+0x8a>
        {
            if (HAL_GPIO_ReadPin(col_ports[col], col_pins[col]) == GPIO_PIN_RESET)
 8000288:	4b16      	ldr	r3, [pc, #88]	@ (80002e4 <keypad_get_key+0xb0>)
 800028a:	687a      	ldr	r2, [r7, #4]
 800028c:	0092      	lsls	r2, r2, #2
 800028e:	58d0      	ldr	r0, [r2, r3]
 8000290:	4b15      	ldr	r3, [pc, #84]	@ (80002e8 <keypad_get_key+0xb4>)
 8000292:	687a      	ldr	r2, [r7, #4]
 8000294:	0052      	lsls	r2, r2, #1
 8000296:	5ad3      	ldrh	r3, [r2, r3]
 8000298:	0019      	movs	r1, r3
 800029a:	f000 fe09 	bl	8000eb0 <HAL_GPIO_ReadPin>
 800029e:	1e03      	subs	r3, r0, #0
 80002a0:	d10a      	bne.n	80002b8 <keypad_get_key+0x84>
            {
                HAL_Delay(150); // debounce
 80002a2:	2096      	movs	r0, #150	@ 0x96
 80002a4:	f000 fbae 	bl	8000a04 <HAL_Delay>
                return key_map[row][col];
 80002a8:	4a10      	ldr	r2, [pc, #64]	@ (80002ec <keypad_get_key+0xb8>)
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	009b      	lsls	r3, r3, #2
 80002ae:	18d2      	adds	r2, r2, r3
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	18d3      	adds	r3, r2, r3
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	e00c      	b.n	80002d2 <keypad_get_key+0x9e>
        for (int col = 0; col < COL_NUM; col++)
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	3301      	adds	r3, #1
 80002bc:	607b      	str	r3, [r7, #4]
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2b03      	cmp	r3, #3
 80002c2:	dde1      	ble.n	8000288 <keypad_get_key+0x54>
    for (int row = 0; row < ROW_NUM; row++)
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	3301      	adds	r3, #1
 80002c8:	60fb      	str	r3, [r7, #12]
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	2b03      	cmp	r3, #3
 80002ce:	ddb7      	ble.n	8000240 <keypad_get_key+0xc>
            }
        }
    }

    return '\0'; // tuşa basılmadı
 80002d0:	2300      	movs	r3, #0
}
 80002d2:	0018      	movs	r0, r3
 80002d4:	46bd      	mov	sp, r7
 80002d6:	b004      	add	sp, #16
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	46c0      	nop			@ (mov r8, r8)
 80002dc:	20000008 	.word	0x20000008
 80002e0:	20000000 	.word	0x20000000
 80002e4:	20000020 	.word	0x20000020
 80002e8:	20000018 	.word	0x20000018
 80002ec:	20000030 	.word	0x20000030

080002f0 <lcd_send_nibble>:
void lcd_puts(char* str);
void lcd_clear(void);

#endif /* INC_LCD_H_ */

static void lcd_send_nibble(uint8_t nibble) {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	0002      	movs	r2, r0
 80002f8:	1dfb      	adds	r3, r7, #7
 80002fa:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LCD_D4_GPIO_Port, LCD_D4_Pin, (nibble >> 0) & 0x01);
 80002fc:	1dfb      	adds	r3, r7, #7
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	2201      	movs	r2, #1
 8000302:	4013      	ands	r3, r2
 8000304:	b2da      	uxtb	r2, r3
 8000306:	23a0      	movs	r3, #160	@ 0xa0
 8000308:	05db      	lsls	r3, r3, #23
 800030a:	2110      	movs	r1, #16
 800030c:	0018      	movs	r0, r3
 800030e:	f000 fdec 	bl	8000eea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_GPIO_Port, LCD_D5_Pin, (nibble >> 1) & 0x01);
 8000312:	1dfb      	adds	r3, r7, #7
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	085b      	lsrs	r3, r3, #1
 8000318:	b2db      	uxtb	r3, r3
 800031a:	2201      	movs	r2, #1
 800031c:	4013      	ands	r3, r2
 800031e:	b2da      	uxtb	r2, r3
 8000320:	23a0      	movs	r3, #160	@ 0xa0
 8000322:	05db      	lsls	r3, r3, #23
 8000324:	2120      	movs	r1, #32
 8000326:	0018      	movs	r0, r3
 8000328:	f000 fddf 	bl	8000eea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_GPIO_Port, LCD_D6_Pin, (nibble >> 2) & 0x01);
 800032c:	1dfb      	adds	r3, r7, #7
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	089b      	lsrs	r3, r3, #2
 8000332:	b2db      	uxtb	r3, r3
 8000334:	2201      	movs	r2, #1
 8000336:	4013      	ands	r3, r2
 8000338:	b2da      	uxtb	r2, r3
 800033a:	23a0      	movs	r3, #160	@ 0xa0
 800033c:	05db      	lsls	r3, r3, #23
 800033e:	2140      	movs	r1, #64	@ 0x40
 8000340:	0018      	movs	r0, r3
 8000342:	f000 fdd2 	bl	8000eea <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_GPIO_Port, LCD_D7_Pin, (nibble >> 3) & 0x01);
 8000346:	1dfb      	adds	r3, r7, #7
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	08db      	lsrs	r3, r3, #3
 800034c:	b2db      	uxtb	r3, r3
 800034e:	2201      	movs	r2, #1
 8000350:	4013      	ands	r3, r2
 8000352:	b2da      	uxtb	r2, r3
 8000354:	23a0      	movs	r3, #160	@ 0xa0
 8000356:	05db      	lsls	r3, r3, #23
 8000358:	2180      	movs	r1, #128	@ 0x80
 800035a:	0018      	movs	r0, r3
 800035c:	f000 fdc5 	bl	8000eea <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_SET);
 8000360:	23a0      	movs	r3, #160	@ 0xa0
 8000362:	05db      	lsls	r3, r3, #23
 8000364:	2201      	movs	r2, #1
 8000366:	2102      	movs	r1, #2
 8000368:	0018      	movs	r0, r3
 800036a:	f000 fdbe 	bl	8000eea <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800036e:	2001      	movs	r0, #1
 8000370:	f000 fb48 	bl	8000a04 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_EN_GPIO_Port, LCD_EN_Pin, GPIO_PIN_RESET);
 8000374:	23a0      	movs	r3, #160	@ 0xa0
 8000376:	05db      	lsls	r3, r3, #23
 8000378:	2200      	movs	r2, #0
 800037a:	2102      	movs	r1, #2
 800037c:	0018      	movs	r0, r3
 800037e:	f000 fdb4 	bl	8000eea <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000382:	2001      	movs	r0, #1
 8000384:	f000 fb3e 	bl	8000a04 <HAL_Delay>
}
 8000388:	46c0      	nop			@ (mov r8, r8)
 800038a:	46bd      	mov	sp, r7
 800038c:	b002      	add	sp, #8
 800038e:	bd80      	pop	{r7, pc}

08000390 <lcd_send_cmd>:

void lcd_send_cmd(uint8_t cmd) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	0002      	movs	r2, r0
 8000398:	1dfb      	adds	r3, r7, #7
 800039a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800039c:	23a0      	movs	r3, #160	@ 0xa0
 800039e:	05db      	lsls	r3, r3, #23
 80003a0:	2200      	movs	r2, #0
 80003a2:	2101      	movs	r1, #1
 80003a4:	0018      	movs	r0, r3
 80003a6:	f000 fda0 	bl	8000eea <HAL_GPIO_WritePin>
    lcd_send_nibble(cmd >> 4);
 80003aa:	1dfb      	adds	r3, r7, #7
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	091b      	lsrs	r3, r3, #4
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	0018      	movs	r0, r3
 80003b4:	f7ff ff9c 	bl	80002f0 <lcd_send_nibble>
    lcd_send_nibble(cmd & 0x0F);
 80003b8:	1dfb      	adds	r3, r7, #7
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	220f      	movs	r2, #15
 80003be:	4013      	ands	r3, r2
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	0018      	movs	r0, r3
 80003c4:	f7ff ff94 	bl	80002f0 <lcd_send_nibble>
    HAL_Delay(2);
 80003c8:	2002      	movs	r0, #2
 80003ca:	f000 fb1b 	bl	8000a04 <HAL_Delay>
}
 80003ce:	46c0      	nop			@ (mov r8, r8)
 80003d0:	46bd      	mov	sp, r7
 80003d2:	b002      	add	sp, #8
 80003d4:	bd80      	pop	{r7, pc}

080003d6 <lcd_send_data>:

void lcd_send_data(uint8_t data) {
 80003d6:	b580      	push	{r7, lr}
 80003d8:	b082      	sub	sp, #8
 80003da:	af00      	add	r7, sp, #0
 80003dc:	0002      	movs	r2, r0
 80003de:	1dfb      	adds	r3, r7, #7
 80003e0:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 80003e2:	23a0      	movs	r3, #160	@ 0xa0
 80003e4:	05db      	lsls	r3, r3, #23
 80003e6:	2201      	movs	r2, #1
 80003e8:	2101      	movs	r1, #1
 80003ea:	0018      	movs	r0, r3
 80003ec:	f000 fd7d 	bl	8000eea <HAL_GPIO_WritePin>
    lcd_send_nibble(data >> 4);
 80003f0:	1dfb      	adds	r3, r7, #7
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	091b      	lsrs	r3, r3, #4
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	0018      	movs	r0, r3
 80003fa:	f7ff ff79 	bl	80002f0 <lcd_send_nibble>
    lcd_send_nibble(data & 0x0F);
 80003fe:	1dfb      	adds	r3, r7, #7
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	220f      	movs	r2, #15
 8000404:	4013      	ands	r3, r2
 8000406:	b2db      	uxtb	r3, r3
 8000408:	0018      	movs	r0, r3
 800040a:	f7ff ff71 	bl	80002f0 <lcd_send_nibble>
    HAL_Delay(2);
 800040e:	2002      	movs	r0, #2
 8000410:	f000 faf8 	bl	8000a04 <HAL_Delay>
}
 8000414:	46c0      	nop			@ (mov r8, r8)
 8000416:	46bd      	mov	sp, r7
 8000418:	b002      	add	sp, #8
 800041a:	bd80      	pop	{r7, pc}

0800041c <lcd_puts>:

void lcd_puts(char* str) {
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000424:	e006      	b.n	8000434 <lcd_puts+0x18>
        lcd_send_data(*str++);
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	1c5a      	adds	r2, r3, #1
 800042a:	607a      	str	r2, [r7, #4]
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	0018      	movs	r0, r3
 8000430:	f7ff ffd1 	bl	80003d6 <lcd_send_data>
    while (*str) {
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d1f4      	bne.n	8000426 <lcd_puts+0xa>
    }
}
 800043c:	46c0      	nop			@ (mov r8, r8)
 800043e:	46c0      	nop			@ (mov r8, r8)
 8000440:	46bd      	mov	sp, r7
 8000442:	b002      	add	sp, #8
 8000444:	bd80      	pop	{r7, pc}

08000446 <lcd_clear>:

void lcd_clear(void) {
 8000446:	b580      	push	{r7, lr}
 8000448:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x01);
 800044a:	2001      	movs	r0, #1
 800044c:	f7ff ffa0 	bl	8000390 <lcd_send_cmd>
    HAL_Delay(2);
 8000450:	2002      	movs	r0, #2
 8000452:	f000 fad7 	bl	8000a04 <HAL_Delay>
}
 8000456:	46c0      	nop			@ (mov r8, r8)
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <lcd_init>:

void lcd_init(void) {
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
    HAL_Delay(50);
 8000460:	2032      	movs	r0, #50	@ 0x32
 8000462:	f000 facf 	bl	8000a04 <HAL_Delay>
    lcd_send_cmd(0x02); // 4-bit başlat
 8000466:	2002      	movs	r0, #2
 8000468:	f7ff ff92 	bl	8000390 <lcd_send_cmd>
    lcd_send_cmd(0x28); // 4-bit, 2 satır, 5x8
 800046c:	2028      	movs	r0, #40	@ 0x28
 800046e:	f7ff ff8f 	bl	8000390 <lcd_send_cmd>
    lcd_send_cmd(0x0C); // Display ON, cursor OFF
 8000472:	200c      	movs	r0, #12
 8000474:	f7ff ff8c 	bl	8000390 <lcd_send_cmd>
    lcd_send_cmd(0x06); // Auto-increment cursor
 8000478:	2006      	movs	r0, #6
 800047a:	f7ff ff89 	bl	8000390 <lcd_send_cmd>
    lcd_send_cmd(0x01); // Ekranı temizle
 800047e:	2001      	movs	r0, #1
 8000480:	f7ff ff86 	bl	8000390 <lcd_send_cmd>
    HAL_Delay(2);
 8000484:	2002      	movs	r0, #2
 8000486:	f000 fabd 	bl	8000a04 <HAL_Delay>
}
 800048a:	46c0      	nop			@ (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}

08000490 <main>:
  * @retval int
  */


int main(void)
{
 8000490:	b590      	push	{r4, r7, lr}
 8000492:	b085      	sub	sp, #20
 8000494:	af00      	add	r7, sp, #0
  HAL_Init();
 8000496:	f000 fa45 	bl	8000924 <HAL_Init>
  SystemClock_Config();  // CubeIDE bu fonksiyonu otomatik oluşturur
 800049a:	f000 f8f9 	bl	8000690 <SystemClock_Config>
  MX_GPIO_Init();        // GPIO yapılandırması
 800049e:	f000 f94b 	bl	8000738 <MX_GPIO_Init>

  lcd_init();
 80004a2:	f7ff ffdb 	bl	800045c <lcd_init>
  lcd_puts("Enter Pass:");
 80004a6:	4b6e      	ldr	r3, [pc, #440]	@ (8000660 <main+0x1d0>)
 80004a8:	0018      	movs	r0, r3
 80004aa:	f7ff ffb7 	bl	800041c <lcd_puts>

  int idx = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	60fb      	str	r3, [r7, #12]

  char key = '\0';
 80004b2:	1dfb      	adds	r3, r7, #7
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]

  while (1)
  {
      key = keypad_get_key();
 80004b8:	1dfc      	adds	r4, r7, #7
 80004ba:	f7ff febb 	bl	8000234 <keypad_get_key>
 80004be:	0003      	movs	r3, r0
 80004c0:	7023      	strb	r3, [r4, #0]
      if (key != '\0')
 80004c2:	1dfb      	adds	r3, r7, #7
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d0f6      	beq.n	80004b8 <main+0x28>
      {
          if (key == '#')  // Şifre değiştirme modu
 80004ca:	1dfb      	adds	r3, r7, #7
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b23      	cmp	r3, #35	@ 0x23
 80004d0:	d000      	beq.n	80004d4 <main+0x44>
 80004d2:	e081      	b.n	80005d8 <main+0x148>
          {
              char temp[5] = {0};
 80004d4:	003b      	movs	r3, r7
 80004d6:	0018      	movs	r0, r3
 80004d8:	2305      	movs	r3, #5
 80004da:	001a      	movs	r2, r3
 80004dc:	2100      	movs	r1, #0
 80004de:	f001 fac3 	bl	8001a68 <memset>
              int confirm_idx = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	60bb      	str	r3, [r7, #8]

              lcd_clear();
 80004e6:	f7ff ffae 	bl	8000446 <lcd_clear>
              lcd_puts("Old Password:");
 80004ea:	4b5e      	ldr	r3, [pc, #376]	@ (8000664 <main+0x1d4>)
 80004ec:	0018      	movs	r0, r3
 80004ee:	f7ff ff95 	bl	800041c <lcd_puts>

              // Mevcut şifreyi girme
              while (confirm_idx < 4)
 80004f2:	e017      	b.n	8000524 <main+0x94>
              {
                  char k = keypad_get_key();
 80004f4:	1d7c      	adds	r4, r7, #5
 80004f6:	f7ff fe9d 	bl	8000234 <keypad_get_key>
 80004fa:	0003      	movs	r3, r0
 80004fc:	7023      	strb	r3, [r4, #0]
                  if (k != '\0')
 80004fe:	1d7b      	adds	r3, r7, #5
 8000500:	781b      	ldrb	r3, [r3, #0]
 8000502:	2b00      	cmp	r3, #0
 8000504:	d00e      	beq.n	8000524 <main+0x94>
                  {
                      lcd_send_data(key);
 8000506:	1dfb      	adds	r3, r7, #7
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	0018      	movs	r0, r3
 800050c:	f7ff ff63 	bl	80003d6 <lcd_send_data>
                      temp[confirm_idx++] = k;
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	1c5a      	adds	r2, r3, #1
 8000514:	60ba      	str	r2, [r7, #8]
 8000516:	003a      	movs	r2, r7
 8000518:	1d79      	adds	r1, r7, #5
 800051a:	7809      	ldrb	r1, [r1, #0]
 800051c:	54d1      	strb	r1, [r2, r3]
                      HAL_Delay(200);
 800051e:	20c8      	movs	r0, #200	@ 0xc8
 8000520:	f000 fa70 	bl	8000a04 <HAL_Delay>
              while (confirm_idx < 4)
 8000524:	68bb      	ldr	r3, [r7, #8]
 8000526:	2b03      	cmp	r3, #3
 8000528:	dde4      	ble.n	80004f4 <main+0x64>
                  }
              }
              temp[4] = '\0';
 800052a:	003b      	movs	r3, r7
 800052c:	2200      	movs	r2, #0
 800052e:	711a      	strb	r2, [r3, #4]

              lcd_clear();
 8000530:	f7ff ff89 	bl	8000446 <lcd_clear>
              if (strcmp(temp, password) == 0)
 8000534:	4a4c      	ldr	r2, [pc, #304]	@ (8000668 <main+0x1d8>)
 8000536:	003b      	movs	r3, r7
 8000538:	0011      	movs	r1, r2
 800053a:	0018      	movs	r0, r3
 800053c:	f7ff fde4 	bl	8000108 <strcmp>
 8000540:	1e03      	subs	r3, r0, #0
 8000542:	d137      	bne.n	80005b4 <main+0x124>
              {
                  lcd_puts("New Password:");
 8000544:	4b49      	ldr	r3, [pc, #292]	@ (800066c <main+0x1dc>)
 8000546:	0018      	movs	r0, r3
 8000548:	f7ff ff68 	bl	800041c <lcd_puts>
                  idx = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	60fb      	str	r3, [r7, #12]

                  while (idx < 4)
 8000550:	e017      	b.n	8000582 <main+0xf2>
                  {
                      char nk = keypad_get_key();
 8000552:	1dbc      	adds	r4, r7, #6
 8000554:	f7ff fe6e 	bl	8000234 <keypad_get_key>
 8000558:	0003      	movs	r3, r0
 800055a:	7023      	strb	r3, [r4, #0]
                      if (nk != '\0')
 800055c:	1dbb      	adds	r3, r7, #6
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d00e      	beq.n	8000582 <main+0xf2>
                      {
                          lcd_send_data(nk);
 8000564:	1dbb      	adds	r3, r7, #6
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	0018      	movs	r0, r3
 800056a:	f7ff ff34 	bl	80003d6 <lcd_send_data>
                          password[idx++] = nk;
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	1c5a      	adds	r2, r3, #1
 8000572:	60fa      	str	r2, [r7, #12]
 8000574:	4a3c      	ldr	r2, [pc, #240]	@ (8000668 <main+0x1d8>)
 8000576:	1db9      	adds	r1, r7, #6
 8000578:	7809      	ldrb	r1, [r1, #0]
 800057a:	54d1      	strb	r1, [r2, r3]
                          HAL_Delay(200);
 800057c:	20c8      	movs	r0, #200	@ 0xc8
 800057e:	f000 fa41 	bl	8000a04 <HAL_Delay>
                  while (idx < 4)
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	2b03      	cmp	r3, #3
 8000586:	dde4      	ble.n	8000552 <main+0xc2>
                      }
                  }
                  password[4] = '\0';
 8000588:	4b37      	ldr	r3, [pc, #220]	@ (8000668 <main+0x1d8>)
 800058a:	2200      	movs	r2, #0
 800058c:	711a      	strb	r2, [r3, #4]

                  lcd_clear();
 800058e:	f7ff ff5a 	bl	8000446 <lcd_clear>
                  lcd_puts("Saved!");
 8000592:	4b37      	ldr	r3, [pc, #220]	@ (8000670 <main+0x1e0>)
 8000594:	0018      	movs	r0, r3
 8000596:	f7ff ff41 	bl	800041c <lcd_puts>
                  HAL_Delay(1500);
 800059a:	4b36      	ldr	r3, [pc, #216]	@ (8000674 <main+0x1e4>)
 800059c:	0018      	movs	r0, r3
 800059e:	f000 fa31 	bl	8000a04 <HAL_Delay>
                  lcd_clear();
 80005a2:	f7ff ff50 	bl	8000446 <lcd_clear>
                  lcd_puts("Enter Pass:");
 80005a6:	4b2e      	ldr	r3, [pc, #184]	@ (8000660 <main+0x1d0>)
 80005a8:	0018      	movs	r0, r3
 80005aa:	f7ff ff37 	bl	800041c <lcd_puts>
                  idx = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	e781      	b.n	80004b8 <main+0x28>
              }
              else
              {
                  lcd_puts("Wrong Password!");
 80005b4:	4b30      	ldr	r3, [pc, #192]	@ (8000678 <main+0x1e8>)
 80005b6:	0018      	movs	r0, r3
 80005b8:	f7ff ff30 	bl	800041c <lcd_puts>
                  HAL_Delay(2000);
 80005bc:	23fa      	movs	r3, #250	@ 0xfa
 80005be:	00db      	lsls	r3, r3, #3
 80005c0:	0018      	movs	r0, r3
 80005c2:	f000 fa1f 	bl	8000a04 <HAL_Delay>
                  lcd_clear();
 80005c6:	f7ff ff3e 	bl	8000446 <lcd_clear>
                  lcd_puts("Enter Pass:");
 80005ca:	4b25      	ldr	r3, [pc, #148]	@ (8000660 <main+0x1d0>)
 80005cc:	0018      	movs	r0, r3
 80005ce:	f7ff ff25 	bl	800041c <lcd_puts>
                  idx = 0;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	e76f      	b.n	80004b8 <main+0x28>
              }
          }

          else  // Normal şifre kontrol modu
          {
              lcd_send_data(key);
 80005d8:	1dfb      	adds	r3, r7, #7
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	0018      	movs	r0, r3
 80005de:	f7ff fefa 	bl	80003d6 <lcd_send_data>
              input[idx++] = key;
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	1c5a      	adds	r2, r3, #1
 80005e6:	60fa      	str	r2, [r7, #12]
 80005e8:	4a24      	ldr	r2, [pc, #144]	@ (800067c <main+0x1ec>)
 80005ea:	1df9      	adds	r1, r7, #7
 80005ec:	7809      	ldrb	r1, [r1, #0]
 80005ee:	54d1      	strb	r1, [r2, r3]

              if (idx == 4)
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	2b04      	cmp	r3, #4
 80005f4:	d000      	beq.n	80005f8 <main+0x168>
 80005f6:	e75f      	b.n	80004b8 <main+0x28>
              {
                  input[4] = '\0';
 80005f8:	4b20      	ldr	r3, [pc, #128]	@ (800067c <main+0x1ec>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	711a      	strb	r2, [r3, #4]

                  lcd_clear();
 80005fe:	f7ff ff22 	bl	8000446 <lcd_clear>
                  if (strcmp(input, password) == 0)
 8000602:	4a19      	ldr	r2, [pc, #100]	@ (8000668 <main+0x1d8>)
 8000604:	4b1d      	ldr	r3, [pc, #116]	@ (800067c <main+0x1ec>)
 8000606:	0011      	movs	r1, r2
 8000608:	0018      	movs	r0, r3
 800060a:	f7ff fd7d 	bl	8000108 <strcmp>
 800060e:	1e03      	subs	r3, r0, #0
 8000610:	d114      	bne.n	800063c <main+0x1ac>
                  {
                      lcd_puts("Correct!");
 8000612:	4b1b      	ldr	r3, [pc, #108]	@ (8000680 <main+0x1f0>)
 8000614:	0018      	movs	r0, r3
 8000616:	f7ff ff01 	bl	800041c <lcd_puts>
                      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET); // Röleyi aç
 800061a:	4b1a      	ldr	r3, [pc, #104]	@ (8000684 <main+0x1f4>)
 800061c:	2201      	movs	r2, #1
 800061e:	2101      	movs	r1, #1
 8000620:	0018      	movs	r0, r3
 8000622:	f000 fc62 	bl	8000eea <HAL_GPIO_WritePin>
                      HAL_Delay(3000);
 8000626:	4b18      	ldr	r3, [pc, #96]	@ (8000688 <main+0x1f8>)
 8000628:	0018      	movs	r0, r3
 800062a:	f000 f9eb 	bl	8000a04 <HAL_Delay>
                      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 800062e:	4b15      	ldr	r3, [pc, #84]	@ (8000684 <main+0x1f4>)
 8000630:	2200      	movs	r2, #0
 8000632:	2101      	movs	r1, #1
 8000634:	0018      	movs	r0, r3
 8000636:	f000 fc58 	bl	8000eea <HAL_GPIO_WritePin>
 800063a:	e003      	b.n	8000644 <main+0x1b4>
                  }
                  else
                  {
                      lcd_puts("Wrong!");
 800063c:	4b13      	ldr	r3, [pc, #76]	@ (800068c <main+0x1fc>)
 800063e:	0018      	movs	r0, r3
 8000640:	f7ff feec 	bl	800041c <lcd_puts>
                  }

                  HAL_Delay(2000);
 8000644:	23fa      	movs	r3, #250	@ 0xfa
 8000646:	00db      	lsls	r3, r3, #3
 8000648:	0018      	movs	r0, r3
 800064a:	f000 f9db 	bl	8000a04 <HAL_Delay>
                  lcd_clear();
 800064e:	f7ff fefa 	bl	8000446 <lcd_clear>
                  lcd_puts("Enter Pass:");
 8000652:	4b03      	ldr	r3, [pc, #12]	@ (8000660 <main+0x1d0>)
 8000654:	0018      	movs	r0, r3
 8000656:	f7ff fee1 	bl	800041c <lcd_puts>
                  idx = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
      key = keypad_get_key();
 800065e:	e72b      	b.n	80004b8 <main+0x28>
 8000660:	08001ad8 	.word	0x08001ad8
 8000664:	08001ae4 	.word	0x08001ae4
 8000668:	20000040 	.word	0x20000040
 800066c:	08001af4 	.word	0x08001af4
 8000670:	08001b04 	.word	0x08001b04
 8000674:	000005dc 	.word	0x000005dc
 8000678:	08001b0c 	.word	0x08001b0c
 800067c:	20000070 	.word	0x20000070
 8000680:	08001b1c 	.word	0x08001b1c
 8000684:	50000800 	.word	0x50000800
 8000688:	00000bb8 	.word	0x00000bb8
 800068c:	08001b28 	.word	0x08001b28

08000690 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b095      	sub	sp, #84	@ 0x54
 8000694:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000696:	2418      	movs	r4, #24
 8000698:	193b      	adds	r3, r7, r4
 800069a:	0018      	movs	r0, r3
 800069c:	2338      	movs	r3, #56	@ 0x38
 800069e:	001a      	movs	r2, r3
 80006a0:	2100      	movs	r1, #0
 80006a2:	f001 f9e1 	bl	8001a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	0018      	movs	r0, r3
 80006aa:	2314      	movs	r3, #20
 80006ac:	001a      	movs	r2, r3
 80006ae:	2100      	movs	r1, #0
 80006b0:	f001 f9da 	bl	8001a68 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000730 <SystemClock_Config+0xa0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a1e      	ldr	r2, [pc, #120]	@ (8000734 <SystemClock_Config+0xa4>)
 80006ba:	401a      	ands	r2, r3
 80006bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000730 <SystemClock_Config+0xa0>)
 80006be:	2180      	movs	r1, #128	@ 0x80
 80006c0:	0109      	lsls	r1, r1, #4
 80006c2:	430a      	orrs	r2, r1
 80006c4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006c6:	0021      	movs	r1, r4
 80006c8:	187b      	adds	r3, r7, r1
 80006ca:	2210      	movs	r2, #16
 80006cc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006ce:	187b      	adds	r3, r7, r1
 80006d0:	2201      	movs	r2, #1
 80006d2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2200      	movs	r2, #0
 80006d8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	22a0      	movs	r2, #160	@ 0xa0
 80006de:	0212      	lsls	r2, r2, #8
 80006e0:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2200      	movs	r2, #0
 80006e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 fc1a 	bl	8000f24 <HAL_RCC_OscConfig>
 80006f0:	1e03      	subs	r3, r0, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80006f4:	f000 f8b4 	bl	8000860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	220f      	movs	r2, #15
 80006fc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2200      	movs	r2, #0
 8000702:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	2100      	movs	r1, #0
 800071a:	0018      	movs	r0, r3
 800071c:	f000 ffd6 	bl	80016cc <HAL_RCC_ClockConfig>
 8000720:	1e03      	subs	r3, r0, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000724:	f000 f89c 	bl	8000860 <Error_Handler>
  }
}
 8000728:	46c0      	nop			@ (mov r8, r8)
 800072a:	46bd      	mov	sp, r7
 800072c:	b015      	add	sp, #84	@ 0x54
 800072e:	bd90      	pop	{r4, r7, pc}
 8000730:	40007000 	.word	0x40007000
 8000734:	ffffe7ff 	.word	0xffffe7ff

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b089      	sub	sp, #36	@ 0x24
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	240c      	movs	r4, #12
 8000740:	193b      	adds	r3, r7, r4
 8000742:	0018      	movs	r0, r3
 8000744:	2314      	movs	r3, #20
 8000746:	001a      	movs	r2, r3
 8000748:	2100      	movs	r1, #0
 800074a:	f001 f98d 	bl	8001a68 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074e:	4b41      	ldr	r3, [pc, #260]	@ (8000854 <MX_GPIO_Init+0x11c>)
 8000750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000752:	4b40      	ldr	r3, [pc, #256]	@ (8000854 <MX_GPIO_Init+0x11c>)
 8000754:	2104      	movs	r1, #4
 8000756:	430a      	orrs	r2, r1
 8000758:	62da      	str	r2, [r3, #44]	@ 0x2c
 800075a:	4b3e      	ldr	r3, [pc, #248]	@ (8000854 <MX_GPIO_Init+0x11c>)
 800075c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800075e:	2204      	movs	r2, #4
 8000760:	4013      	ands	r3, r2
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b3b      	ldr	r3, [pc, #236]	@ (8000854 <MX_GPIO_Init+0x11c>)
 8000768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800076a:	4b3a      	ldr	r3, [pc, #232]	@ (8000854 <MX_GPIO_Init+0x11c>)
 800076c:	2101      	movs	r1, #1
 800076e:	430a      	orrs	r2, r1
 8000770:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000772:	4b38      	ldr	r3, [pc, #224]	@ (8000854 <MX_GPIO_Init+0x11c>)
 8000774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000776:	2201      	movs	r2, #1
 8000778:	4013      	ands	r3, r2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4b35      	ldr	r3, [pc, #212]	@ (8000854 <MX_GPIO_Init+0x11c>)
 8000780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000782:	4b34      	ldr	r3, [pc, #208]	@ (8000854 <MX_GPIO_Init+0x11c>)
 8000784:	2102      	movs	r1, #2
 8000786:	430a      	orrs	r2, r1
 8000788:	62da      	str	r2, [r3, #44]	@ 0x2c
 800078a:	4b32      	ldr	r3, [pc, #200]	@ (8000854 <MX_GPIO_Init+0x11c>)
 800078c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800078e:	2202      	movs	r2, #2
 8000790:	4013      	ands	r3, r2
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000796:	4b30      	ldr	r3, [pc, #192]	@ (8000858 <MX_GPIO_Init+0x120>)
 8000798:	2200      	movs	r2, #0
 800079a:	2101      	movs	r1, #1
 800079c:	0018      	movs	r0, r3
 800079e:	f000 fba4 	bl	8000eea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80007a2:	23a0      	movs	r3, #160	@ 0xa0
 80007a4:	05db      	lsls	r3, r3, #23
 80007a6:	2200      	movs	r2, #0
 80007a8:	21f3      	movs	r1, #243	@ 0xf3
 80007aa:	0018      	movs	r0, r3
 80007ac:	f000 fb9d 	bl	8000eea <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80007b0:	4b2a      	ldr	r3, [pc, #168]	@ (800085c <MX_GPIO_Init+0x124>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	210f      	movs	r1, #15
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 fb97 	bl	8000eea <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007bc:	193b      	adds	r3, r7, r4
 80007be:	2201      	movs	r2, #1
 80007c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	2201      	movs	r2, #1
 80007c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	193b      	adds	r3, r7, r4
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	4a20      	ldr	r2, [pc, #128]	@ (8000858 <MX_GPIO_Init+0x120>)
 80007d8:	0019      	movs	r1, r3
 80007da:	0010      	movs	r0, r2
 80007dc:	f000 f9ea 	bl	8000bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	22f3      	movs	r2, #243	@ 0xf3
 80007e4:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	193b      	adds	r3, r7, r4
 80007e8:	2201      	movs	r2, #1
 80007ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	193b      	adds	r3, r7, r4
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f8:	193a      	adds	r2, r7, r4
 80007fa:	23a0      	movs	r3, #160	@ 0xa0
 80007fc:	05db      	lsls	r3, r3, #23
 80007fe:	0011      	movs	r1, r2
 8000800:	0018      	movs	r0, r3
 8000802:	f000 f9d7 	bl	8000bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000806:	193b      	adds	r3, r7, r4
 8000808:	220f      	movs	r2, #15
 800080a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	193b      	adds	r3, r7, r4
 800080e:	2201      	movs	r2, #1
 8000810:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000812:	193b      	adds	r3, r7, r4
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	193b      	adds	r3, r7, r4
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081e:	193b      	adds	r3, r7, r4
 8000820:	4a0e      	ldr	r2, [pc, #56]	@ (800085c <MX_GPIO_Init+0x124>)
 8000822:	0019      	movs	r1, r3
 8000824:	0010      	movs	r0, r2
 8000826:	f000 f9c5 	bl	8000bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800082a:	0021      	movs	r1, r4
 800082c:	187b      	adds	r3, r7, r1
 800082e:	22f0      	movs	r2, #240	@ 0xf0
 8000830:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2200      	movs	r2, #0
 8000836:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2201      	movs	r2, #1
 800083c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083e:	187b      	adds	r3, r7, r1
 8000840:	4a06      	ldr	r2, [pc, #24]	@ (800085c <MX_GPIO_Init+0x124>)
 8000842:	0019      	movs	r1, r3
 8000844:	0010      	movs	r0, r2
 8000846:	f000 f9b5 	bl	8000bb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800084a:	46c0      	nop			@ (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b009      	add	sp, #36	@ 0x24
 8000850:	bd90      	pop	{r4, r7, pc}
 8000852:	46c0      	nop			@ (mov r8, r8)
 8000854:	40021000 	.word	0x40021000
 8000858:	50000800 	.word	0x50000800
 800085c:	50000400 	.word	0x50000400

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000868:	46c0      	nop			@ (mov r8, r8)
 800086a:	e7fd      	b.n	8000868 <Error_Handler+0x8>

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000870:	4b07      	ldr	r3, [pc, #28]	@ (8000890 <HAL_MspInit+0x24>)
 8000872:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000874:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <HAL_MspInit+0x24>)
 8000876:	2101      	movs	r1, #1
 8000878:	430a      	orrs	r2, r1
 800087a:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800087c:	4b04      	ldr	r3, [pc, #16]	@ (8000890 <HAL_MspInit+0x24>)
 800087e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000880:	4b03      	ldr	r3, [pc, #12]	@ (8000890 <HAL_MspInit+0x24>)
 8000882:	2180      	movs	r1, #128	@ 0x80
 8000884:	0549      	lsls	r1, r1, #21
 8000886:	430a      	orrs	r2, r1
 8000888:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40021000 	.word	0x40021000

08000894 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000898:	46c0      	nop			@ (mov r8, r8)
 800089a:	e7fd      	b.n	8000898 <NMI_Handler+0x4>

0800089c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a0:	46c0      	nop			@ (mov r8, r8)
 80008a2:	e7fd      	b.n	80008a0 <HardFault_Handler+0x4>

080008a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008a8:	46c0      	nop			@ (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b2:	46c0      	nop			@ (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008bc:	f000 f886 	bl	80009cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c0:	46c0      	nop			@ (mov r8, r8)
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008ca:	46c0      	nop			@ (mov r8, r8)
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80008d0:	480d      	ldr	r0, [pc, #52]	@ (8000908 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80008d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008d4:	f7ff fff7 	bl	80008c6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d8:	480c      	ldr	r0, [pc, #48]	@ (800090c <LoopForever+0x6>)
  ldr r1, =_edata
 80008da:	490d      	ldr	r1, [pc, #52]	@ (8000910 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000914 <LoopForever+0xe>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e0:	e002      	b.n	80008e8 <LoopCopyDataInit>

080008e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e6:	3304      	adds	r3, #4

080008e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ec:	d3f9      	bcc.n	80008e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000918 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f0:	4c0a      	ldr	r4, [pc, #40]	@ (800091c <LoopForever+0x16>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f4:	e001      	b.n	80008fa <LoopFillZerobss>

080008f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f8:	3204      	adds	r2, #4

080008fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008fc:	d3fb      	bcc.n	80008f6 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80008fe:	f001 f8bb 	bl	8001a78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000902:	f7ff fdc5 	bl	8000490 <main>

08000906 <LoopForever>:

LoopForever:
    b LoopForever
 8000906:	e7fe      	b.n	8000906 <LoopForever>
   ldr   r0, =_estack
 8000908:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800090c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000910:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000914:	08001b54 	.word	0x08001b54
  ldr r2, =_sbss
 8000918:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 800091c:	2000007c 	.word	0x2000007c

08000920 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000920:	e7fe      	b.n	8000920 <ADC1_COMP_IRQHandler>
	...

08000924 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000930:	4b0b      	ldr	r3, [pc, #44]	@ (8000960 <HAL_Init+0x3c>)
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	4b0a      	ldr	r3, [pc, #40]	@ (8000960 <HAL_Init+0x3c>)
 8000936:	2140      	movs	r1, #64	@ 0x40
 8000938:	430a      	orrs	r2, r1
 800093a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800093c:	2003      	movs	r0, #3
 800093e:	f000 f811 	bl	8000964 <HAL_InitTick>
 8000942:	1e03      	subs	r3, r0, #0
 8000944:	d003      	beq.n	800094e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000946:	1dfb      	adds	r3, r7, #7
 8000948:	2201      	movs	r2, #1
 800094a:	701a      	strb	r2, [r3, #0]
 800094c:	e001      	b.n	8000952 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800094e:	f7ff ff8d 	bl	800086c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000952:	1dfb      	adds	r3, r7, #7
 8000954:	781b      	ldrb	r3, [r3, #0]
}
 8000956:	0018      	movs	r0, r3
 8000958:	46bd      	mov	sp, r7
 800095a:	b002      	add	sp, #8
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			@ (mov r8, r8)
 8000960:	40022000 	.word	0x40022000

08000964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000964:	b590      	push	{r4, r7, lr}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800096c:	4b14      	ldr	r3, [pc, #80]	@ (80009c0 <HAL_InitTick+0x5c>)
 800096e:	681c      	ldr	r4, [r3, #0]
 8000970:	4b14      	ldr	r3, [pc, #80]	@ (80009c4 <HAL_InitTick+0x60>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	0019      	movs	r1, r3
 8000976:	23fa      	movs	r3, #250	@ 0xfa
 8000978:	0098      	lsls	r0, r3, #2
 800097a:	f7ff fbcf 	bl	800011c <__udivsi3>
 800097e:	0003      	movs	r3, r0
 8000980:	0019      	movs	r1, r3
 8000982:	0020      	movs	r0, r4
 8000984:	f7ff fbca 	bl	800011c <__udivsi3>
 8000988:	0003      	movs	r3, r0
 800098a:	0018      	movs	r0, r3
 800098c:	f000 f905 	bl	8000b9a <HAL_SYSTICK_Config>
 8000990:	1e03      	subs	r3, r0, #0
 8000992:	d001      	beq.n	8000998 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000994:	2301      	movs	r3, #1
 8000996:	e00f      	b.n	80009b8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2b03      	cmp	r3, #3
 800099c:	d80b      	bhi.n	80009b6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800099e:	6879      	ldr	r1, [r7, #4]
 80009a0:	2301      	movs	r3, #1
 80009a2:	425b      	negs	r3, r3
 80009a4:	2200      	movs	r2, #0
 80009a6:	0018      	movs	r0, r3
 80009a8:	f000 f8e2 	bl	8000b70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ac:	4b06      	ldr	r3, [pc, #24]	@ (80009c8 <HAL_InitTick+0x64>)
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009b2:	2300      	movs	r3, #0
 80009b4:	e000      	b.n	80009b8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
}
 80009b8:	0018      	movs	r0, r3
 80009ba:	46bd      	mov	sp, r7
 80009bc:	b003      	add	sp, #12
 80009be:	bd90      	pop	{r4, r7, pc}
 80009c0:	20000048 	.word	0x20000048
 80009c4:	20000050 	.word	0x20000050
 80009c8:	2000004c 	.word	0x2000004c

080009cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d0:	4b05      	ldr	r3, [pc, #20]	@ (80009e8 <HAL_IncTick+0x1c>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	001a      	movs	r2, r3
 80009d6:	4b05      	ldr	r3, [pc, #20]	@ (80009ec <HAL_IncTick+0x20>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	18d2      	adds	r2, r2, r3
 80009dc:	4b03      	ldr	r3, [pc, #12]	@ (80009ec <HAL_IncTick+0x20>)
 80009de:	601a      	str	r2, [r3, #0]
}
 80009e0:	46c0      	nop			@ (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			@ (mov r8, r8)
 80009e8:	20000050 	.word	0x20000050
 80009ec:	20000078 	.word	0x20000078

080009f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  return uwTick;
 80009f4:	4b02      	ldr	r3, [pc, #8]	@ (8000a00 <HAL_GetTick+0x10>)
 80009f6:	681b      	ldr	r3, [r3, #0]
}
 80009f8:	0018      	movs	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			@ (mov r8, r8)
 8000a00:	20000078 	.word	0x20000078

08000a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a0c:	f7ff fff0 	bl	80009f0 <HAL_GetTick>
 8000a10:	0003      	movs	r3, r0
 8000a12:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	d005      	beq.n	8000a2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a48 <HAL_Delay+0x44>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	001a      	movs	r2, r3
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	189b      	adds	r3, r3, r2
 8000a28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a2a:	46c0      	nop			@ (mov r8, r8)
 8000a2c:	f7ff ffe0 	bl	80009f0 <HAL_GetTick>
 8000a30:	0002      	movs	r2, r0
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	68fa      	ldr	r2, [r7, #12]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	d8f7      	bhi.n	8000a2c <HAL_Delay+0x28>
  {
  }
}
 8000a3c:	46c0      	nop			@ (mov r8, r8)
 8000a3e:	46c0      	nop			@ (mov r8, r8)
 8000a40:	46bd      	mov	sp, r7
 8000a42:	b004      	add	sp, #16
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	46c0      	nop			@ (mov r8, r8)
 8000a48:	20000050 	.word	0x20000050

08000a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a4c:	b590      	push	{r4, r7, lr}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	0002      	movs	r2, r0
 8000a54:	6039      	str	r1, [r7, #0]
 8000a56:	1dfb      	adds	r3, r7, #7
 8000a58:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a60:	d828      	bhi.n	8000ab4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a62:	4a2f      	ldr	r2, [pc, #188]	@ (8000b20 <__NVIC_SetPriority+0xd4>)
 8000a64:	1dfb      	adds	r3, r7, #7
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	b25b      	sxtb	r3, r3
 8000a6a:	089b      	lsrs	r3, r3, #2
 8000a6c:	33c0      	adds	r3, #192	@ 0xc0
 8000a6e:	009b      	lsls	r3, r3, #2
 8000a70:	589b      	ldr	r3, [r3, r2]
 8000a72:	1dfa      	adds	r2, r7, #7
 8000a74:	7812      	ldrb	r2, [r2, #0]
 8000a76:	0011      	movs	r1, r2
 8000a78:	2203      	movs	r2, #3
 8000a7a:	400a      	ands	r2, r1
 8000a7c:	00d2      	lsls	r2, r2, #3
 8000a7e:	21ff      	movs	r1, #255	@ 0xff
 8000a80:	4091      	lsls	r1, r2
 8000a82:	000a      	movs	r2, r1
 8000a84:	43d2      	mvns	r2, r2
 8000a86:	401a      	ands	r2, r3
 8000a88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	019b      	lsls	r3, r3, #6
 8000a8e:	22ff      	movs	r2, #255	@ 0xff
 8000a90:	401a      	ands	r2, r3
 8000a92:	1dfb      	adds	r3, r7, #7
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	0018      	movs	r0, r3
 8000a98:	2303      	movs	r3, #3
 8000a9a:	4003      	ands	r3, r0
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aa0:	481f      	ldr	r0, [pc, #124]	@ (8000b20 <__NVIC_SetPriority+0xd4>)
 8000aa2:	1dfb      	adds	r3, r7, #7
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	b25b      	sxtb	r3, r3
 8000aa8:	089b      	lsrs	r3, r3, #2
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	33c0      	adds	r3, #192	@ 0xc0
 8000aae:	009b      	lsls	r3, r3, #2
 8000ab0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ab2:	e031      	b.n	8000b18 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b24 <__NVIC_SetPriority+0xd8>)
 8000ab6:	1dfb      	adds	r3, r7, #7
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	0019      	movs	r1, r3
 8000abc:	230f      	movs	r3, #15
 8000abe:	400b      	ands	r3, r1
 8000ac0:	3b08      	subs	r3, #8
 8000ac2:	089b      	lsrs	r3, r3, #2
 8000ac4:	3306      	adds	r3, #6
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	18d3      	adds	r3, r2, r3
 8000aca:	3304      	adds	r3, #4
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	1dfa      	adds	r2, r7, #7
 8000ad0:	7812      	ldrb	r2, [r2, #0]
 8000ad2:	0011      	movs	r1, r2
 8000ad4:	2203      	movs	r2, #3
 8000ad6:	400a      	ands	r2, r1
 8000ad8:	00d2      	lsls	r2, r2, #3
 8000ada:	21ff      	movs	r1, #255	@ 0xff
 8000adc:	4091      	lsls	r1, r2
 8000ade:	000a      	movs	r2, r1
 8000ae0:	43d2      	mvns	r2, r2
 8000ae2:	401a      	ands	r2, r3
 8000ae4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	019b      	lsls	r3, r3, #6
 8000aea:	22ff      	movs	r2, #255	@ 0xff
 8000aec:	401a      	ands	r2, r3
 8000aee:	1dfb      	adds	r3, r7, #7
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	0018      	movs	r0, r3
 8000af4:	2303      	movs	r3, #3
 8000af6:	4003      	ands	r3, r0
 8000af8:	00db      	lsls	r3, r3, #3
 8000afa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000afc:	4809      	ldr	r0, [pc, #36]	@ (8000b24 <__NVIC_SetPriority+0xd8>)
 8000afe:	1dfb      	adds	r3, r7, #7
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	001c      	movs	r4, r3
 8000b04:	230f      	movs	r3, #15
 8000b06:	4023      	ands	r3, r4
 8000b08:	3b08      	subs	r3, #8
 8000b0a:	089b      	lsrs	r3, r3, #2
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	3306      	adds	r3, #6
 8000b10:	009b      	lsls	r3, r3, #2
 8000b12:	18c3      	adds	r3, r0, r3
 8000b14:	3304      	adds	r3, #4
 8000b16:	601a      	str	r2, [r3, #0]
}
 8000b18:	46c0      	nop			@ (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b003      	add	sp, #12
 8000b1e:	bd90      	pop	{r4, r7, pc}
 8000b20:	e000e100 	.word	0xe000e100
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	1e5a      	subs	r2, r3, #1
 8000b34:	2380      	movs	r3, #128	@ 0x80
 8000b36:	045b      	lsls	r3, r3, #17
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d301      	bcc.n	8000b40 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	e010      	b.n	8000b62 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b40:	4b0a      	ldr	r3, [pc, #40]	@ (8000b6c <SysTick_Config+0x44>)
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	3a01      	subs	r2, #1
 8000b46:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b48:	2301      	movs	r3, #1
 8000b4a:	425b      	negs	r3, r3
 8000b4c:	2103      	movs	r1, #3
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f7ff ff7c 	bl	8000a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b54:	4b05      	ldr	r3, [pc, #20]	@ (8000b6c <SysTick_Config+0x44>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b5a:	4b04      	ldr	r3, [pc, #16]	@ (8000b6c <SysTick_Config+0x44>)
 8000b5c:	2207      	movs	r2, #7
 8000b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	0018      	movs	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	b002      	add	sp, #8
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	46c0      	nop			@ (mov r8, r8)
 8000b6c:	e000e010 	.word	0xe000e010

08000b70 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60b9      	str	r1, [r7, #8]
 8000b78:	607a      	str	r2, [r7, #4]
 8000b7a:	210f      	movs	r1, #15
 8000b7c:	187b      	adds	r3, r7, r1
 8000b7e:	1c02      	adds	r2, r0, #0
 8000b80:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	b25b      	sxtb	r3, r3
 8000b8a:	0011      	movs	r1, r2
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f7ff ff5d 	bl	8000a4c <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

}
 8000b92:	46c0      	nop			@ (mov r8, r8)
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b004      	add	sp, #16
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
 8000ba0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f7ff ffbf 	bl	8000b28 <SysTick_Config>
 8000baa:	0003      	movs	r3, r0
}
 8000bac:	0018      	movs	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b002      	add	sp, #8
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000bca:	e155      	b.n	8000e78 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	697a      	ldr	r2, [r7, #20]
 8000bd4:	4091      	lsls	r1, r2
 8000bd6:	000a      	movs	r2, r1
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d100      	bne.n	8000be4 <HAL_GPIO_Init+0x30>
 8000be2:	e146      	b.n	8000e72 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	2203      	movs	r2, #3
 8000bea:	4013      	ands	r3, r2
 8000bec:	2b01      	cmp	r3, #1
 8000bee:	d005      	beq.n	8000bfc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bf8:	2b02      	cmp	r3, #2
 8000bfa:	d130      	bne.n	8000c5e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	2203      	movs	r2, #3
 8000c08:	409a      	lsls	r2, r3
 8000c0a:	0013      	movs	r3, r2
 8000c0c:	43da      	mvns	r2, r3
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	4013      	ands	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	68da      	ldr	r2, [r3, #12]
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	409a      	lsls	r2, r3
 8000c1e:	0013      	movs	r3, r2
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c32:	2201      	movs	r2, #1
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	409a      	lsls	r2, r3
 8000c38:	0013      	movs	r3, r2
 8000c3a:	43da      	mvns	r2, r3
 8000c3c:	693b      	ldr	r3, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	091b      	lsrs	r3, r3, #4
 8000c48:	2201      	movs	r2, #1
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	409a      	lsls	r2, r3
 8000c50:	0013      	movs	r3, r2
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	2203      	movs	r2, #3
 8000c64:	4013      	ands	r3, r2
 8000c66:	2b03      	cmp	r3, #3
 8000c68:	d017      	beq.n	8000c9a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	2203      	movs	r2, #3
 8000c76:	409a      	lsls	r2, r3
 8000c78:	0013      	movs	r3, r2
 8000c7a:	43da      	mvns	r2, r3
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	689a      	ldr	r2, [r3, #8]
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	409a      	lsls	r2, r3
 8000c8c:	0013      	movs	r3, r2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	2b02      	cmp	r3, #2
 8000ca4:	d123      	bne.n	8000cee <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	08da      	lsrs	r2, r3, #3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3208      	adds	r2, #8
 8000cae:	0092      	lsls	r2, r2, #2
 8000cb0:	58d3      	ldr	r3, [r2, r3]
 8000cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	2207      	movs	r2, #7
 8000cb8:	4013      	ands	r3, r2
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	220f      	movs	r2, #15
 8000cbe:	409a      	lsls	r2, r3
 8000cc0:	0013      	movs	r3, r2
 8000cc2:	43da      	mvns	r2, r3
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	691a      	ldr	r2, [r3, #16]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	2107      	movs	r1, #7
 8000cd2:	400b      	ands	r3, r1
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	409a      	lsls	r2, r3
 8000cd8:	0013      	movs	r3, r2
 8000cda:	693a      	ldr	r2, [r7, #16]
 8000cdc:	4313      	orrs	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	08da      	lsrs	r2, r3, #3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	3208      	adds	r2, #8
 8000ce8:	0092      	lsls	r2, r2, #2
 8000cea:	6939      	ldr	r1, [r7, #16]
 8000cec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	005b      	lsls	r3, r3, #1
 8000cf8:	2203      	movs	r2, #3
 8000cfa:	409a      	lsls	r2, r3
 8000cfc:	0013      	movs	r3, r2
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	4013      	ands	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	401a      	ands	r2, r3
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	409a      	lsls	r2, r3
 8000d14:	0013      	movs	r3, r2
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685a      	ldr	r2, [r3, #4]
 8000d26:	23c0      	movs	r3, #192	@ 0xc0
 8000d28:	029b      	lsls	r3, r3, #10
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	d100      	bne.n	8000d30 <HAL_GPIO_Init+0x17c>
 8000d2e:	e0a0      	b.n	8000e72 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d30:	4b57      	ldr	r3, [pc, #348]	@ (8000e90 <HAL_GPIO_Init+0x2dc>)
 8000d32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d34:	4b56      	ldr	r3, [pc, #344]	@ (8000e90 <HAL_GPIO_Init+0x2dc>)
 8000d36:	2101      	movs	r1, #1
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d3c:	4a55      	ldr	r2, [pc, #340]	@ (8000e94 <HAL_GPIO_Init+0x2e0>)
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	089b      	lsrs	r3, r3, #2
 8000d42:	3302      	adds	r3, #2
 8000d44:	009b      	lsls	r3, r3, #2
 8000d46:	589b      	ldr	r3, [r3, r2]
 8000d48:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	2203      	movs	r2, #3
 8000d4e:	4013      	ands	r3, r2
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	220f      	movs	r2, #15
 8000d54:	409a      	lsls	r2, r3
 8000d56:	0013      	movs	r3, r2
 8000d58:	43da      	mvns	r2, r3
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	23a0      	movs	r3, #160	@ 0xa0
 8000d64:	05db      	lsls	r3, r3, #23
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d01f      	beq.n	8000daa <HAL_GPIO_Init+0x1f6>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a4a      	ldr	r2, [pc, #296]	@ (8000e98 <HAL_GPIO_Init+0x2e4>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d019      	beq.n	8000da6 <HAL_GPIO_Init+0x1f2>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a49      	ldr	r2, [pc, #292]	@ (8000e9c <HAL_GPIO_Init+0x2e8>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d013      	beq.n	8000da2 <HAL_GPIO_Init+0x1ee>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a48      	ldr	r2, [pc, #288]	@ (8000ea0 <HAL_GPIO_Init+0x2ec>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d00d      	beq.n	8000d9e <HAL_GPIO_Init+0x1ea>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	4a47      	ldr	r2, [pc, #284]	@ (8000ea4 <HAL_GPIO_Init+0x2f0>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d007      	beq.n	8000d9a <HAL_GPIO_Init+0x1e6>
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a46      	ldr	r2, [pc, #280]	@ (8000ea8 <HAL_GPIO_Init+0x2f4>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d101      	bne.n	8000d96 <HAL_GPIO_Init+0x1e2>
 8000d92:	2305      	movs	r3, #5
 8000d94:	e00a      	b.n	8000dac <HAL_GPIO_Init+0x1f8>
 8000d96:	2306      	movs	r3, #6
 8000d98:	e008      	b.n	8000dac <HAL_GPIO_Init+0x1f8>
 8000d9a:	2304      	movs	r3, #4
 8000d9c:	e006      	b.n	8000dac <HAL_GPIO_Init+0x1f8>
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e004      	b.n	8000dac <HAL_GPIO_Init+0x1f8>
 8000da2:	2302      	movs	r3, #2
 8000da4:	e002      	b.n	8000dac <HAL_GPIO_Init+0x1f8>
 8000da6:	2301      	movs	r3, #1
 8000da8:	e000      	b.n	8000dac <HAL_GPIO_Init+0x1f8>
 8000daa:	2300      	movs	r3, #0
 8000dac:	697a      	ldr	r2, [r7, #20]
 8000dae:	2103      	movs	r1, #3
 8000db0:	400a      	ands	r2, r1
 8000db2:	0092      	lsls	r2, r2, #2
 8000db4:	4093      	lsls	r3, r2
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dbc:	4935      	ldr	r1, [pc, #212]	@ (8000e94 <HAL_GPIO_Init+0x2e0>)
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	089b      	lsrs	r3, r3, #2
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dca:	4b38      	ldr	r3, [pc, #224]	@ (8000eac <HAL_GPIO_Init+0x2f8>)
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685a      	ldr	r2, [r3, #4]
 8000dde:	2380      	movs	r3, #128	@ 0x80
 8000de0:	035b      	lsls	r3, r3, #13
 8000de2:	4013      	ands	r3, r2
 8000de4:	d003      	beq.n	8000dee <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000dee:	4b2f      	ldr	r3, [pc, #188]	@ (8000eac <HAL_GPIO_Init+0x2f8>)
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000df4:	4b2d      	ldr	r3, [pc, #180]	@ (8000eac <HAL_GPIO_Init+0x2f8>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	43da      	mvns	r2, r3
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685a      	ldr	r2, [r3, #4]
 8000e08:	2380      	movs	r3, #128	@ 0x80
 8000e0a:	039b      	lsls	r3, r3, #14
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	d003      	beq.n	8000e18 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e18:	4b24      	ldr	r3, [pc, #144]	@ (8000eac <HAL_GPIO_Init+0x2f8>)
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000e1e:	4b23      	ldr	r3, [pc, #140]	@ (8000eac <HAL_GPIO_Init+0x2f8>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	43da      	mvns	r2, r3
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685a      	ldr	r2, [r3, #4]
 8000e32:	2380      	movs	r3, #128	@ 0x80
 8000e34:	029b      	lsls	r3, r3, #10
 8000e36:	4013      	ands	r3, r2
 8000e38:	d003      	beq.n	8000e42 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e42:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <HAL_GPIO_Init+0x2f8>)
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e48:	4b18      	ldr	r3, [pc, #96]	@ (8000eac <HAL_GPIO_Init+0x2f8>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	43da      	mvns	r2, r3
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685a      	ldr	r2, [r3, #4]
 8000e5c:	2380      	movs	r3, #128	@ 0x80
 8000e5e:	025b      	lsls	r3, r3, #9
 8000e60:	4013      	ands	r3, r2
 8000e62:	d003      	beq.n	8000e6c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000eac <HAL_GPIO_Init+0x2f8>)
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	3301      	adds	r3, #1
 8000e76:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	40da      	lsrs	r2, r3
 8000e80:	1e13      	subs	r3, r2, #0
 8000e82:	d000      	beq.n	8000e86 <HAL_GPIO_Init+0x2d2>
 8000e84:	e6a2      	b.n	8000bcc <HAL_GPIO_Init+0x18>
  }
}
 8000e86:	46c0      	nop			@ (mov r8, r8)
 8000e88:	46c0      	nop			@ (mov r8, r8)
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b006      	add	sp, #24
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40010000 	.word	0x40010000
 8000e98:	50000400 	.word	0x50000400
 8000e9c:	50000800 	.word	0x50000800
 8000ea0:	50000c00 	.word	0x50000c00
 8000ea4:	50001000 	.word	0x50001000
 8000ea8:	50001c00 	.word	0x50001c00
 8000eac:	40010400 	.word	0x40010400

08000eb0 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
 8000eb8:	000a      	movs	r2, r1
 8000eba:	1cbb      	adds	r3, r7, #2
 8000ebc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	691b      	ldr	r3, [r3, #16]
 8000ec2:	1cba      	adds	r2, r7, #2
 8000ec4:	8812      	ldrh	r2, [r2, #0]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	d004      	beq.n	8000ed4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8000eca:	230f      	movs	r3, #15
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	2201      	movs	r2, #1
 8000ed0:	701a      	strb	r2, [r3, #0]
 8000ed2:	e003      	b.n	8000edc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ed4:	230f      	movs	r3, #15
 8000ed6:	18fb      	adds	r3, r7, r3
 8000ed8:	2200      	movs	r2, #0
 8000eda:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8000edc:	230f      	movs	r3, #15
 8000ede:	18fb      	adds	r3, r7, r3
 8000ee0:	781b      	ldrb	r3, [r3, #0]
}
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b004      	add	sp, #16
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
 8000ef2:	0008      	movs	r0, r1
 8000ef4:	0011      	movs	r1, r2
 8000ef6:	1cbb      	adds	r3, r7, #2
 8000ef8:	1c02      	adds	r2, r0, #0
 8000efa:	801a      	strh	r2, [r3, #0]
 8000efc:	1c7b      	adds	r3, r7, #1
 8000efe:	1c0a      	adds	r2, r1, #0
 8000f00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f02:	1c7b      	adds	r3, r7, #1
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d004      	beq.n	8000f14 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f0a:	1cbb      	adds	r3, r7, #2
 8000f0c:	881a      	ldrh	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000f12:	e003      	b.n	8000f1c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000f14:	1cbb      	adds	r3, r7, #2
 8000f16:	881a      	ldrh	r2, [r3, #0]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f1c:	46c0      	nop			@ (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b002      	add	sp, #8
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f24:	b5b0      	push	{r4, r5, r7, lr}
 8000f26:	b08a      	sub	sp, #40	@ 0x28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d102      	bne.n	8000f38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	f000 fbbf 	bl	80016b6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f38:	4bc9      	ldr	r3, [pc, #804]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	220c      	movs	r2, #12
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f42:	4bc7      	ldr	r3, [pc, #796]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 8000f44:	68da      	ldr	r2, [r3, #12]
 8000f46:	2380      	movs	r3, #128	@ 0x80
 8000f48:	025b      	lsls	r3, r3, #9
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	2201      	movs	r2, #1
 8000f54:	4013      	ands	r3, r2
 8000f56:	d100      	bne.n	8000f5a <HAL_RCC_OscConfig+0x36>
 8000f58:	e07e      	b.n	8001058 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	2b08      	cmp	r3, #8
 8000f5e:	d007      	beq.n	8000f70 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	2b0c      	cmp	r3, #12
 8000f64:	d112      	bne.n	8000f8c <HAL_RCC_OscConfig+0x68>
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	2380      	movs	r3, #128	@ 0x80
 8000f6a:	025b      	lsls	r3, r3, #9
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d10d      	bne.n	8000f8c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f70:	4bbb      	ldr	r3, [pc, #748]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	2380      	movs	r3, #128	@ 0x80
 8000f76:	029b      	lsls	r3, r3, #10
 8000f78:	4013      	ands	r3, r2
 8000f7a:	d100      	bne.n	8000f7e <HAL_RCC_OscConfig+0x5a>
 8000f7c:	e06b      	b.n	8001056 <HAL_RCC_OscConfig+0x132>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d167      	bne.n	8001056 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	f000 fb95 	bl	80016b6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685a      	ldr	r2, [r3, #4]
 8000f90:	2380      	movs	r3, #128	@ 0x80
 8000f92:	025b      	lsls	r3, r3, #9
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d107      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x84>
 8000f98:	4bb1      	ldr	r3, [pc, #708]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4bb0      	ldr	r3, [pc, #704]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 8000f9e:	2180      	movs	r1, #128	@ 0x80
 8000fa0:	0249      	lsls	r1, r1, #9
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	601a      	str	r2, [r3, #0]
 8000fa6:	e027      	b.n	8000ff8 <HAL_RCC_OscConfig+0xd4>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685a      	ldr	r2, [r3, #4]
 8000fac:	23a0      	movs	r3, #160	@ 0xa0
 8000fae:	02db      	lsls	r3, r3, #11
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d10e      	bne.n	8000fd2 <HAL_RCC_OscConfig+0xae>
 8000fb4:	4baa      	ldr	r3, [pc, #680]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4ba9      	ldr	r3, [pc, #676]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 8000fba:	2180      	movs	r1, #128	@ 0x80
 8000fbc:	02c9      	lsls	r1, r1, #11
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	4ba7      	ldr	r3, [pc, #668]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	4ba6      	ldr	r3, [pc, #664]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 8000fc8:	2180      	movs	r1, #128	@ 0x80
 8000fca:	0249      	lsls	r1, r1, #9
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	e012      	b.n	8000ff8 <HAL_RCC_OscConfig+0xd4>
 8000fd2:	4ba3      	ldr	r3, [pc, #652]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	4ba2      	ldr	r3, [pc, #648]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 8000fd8:	49a2      	ldr	r1, [pc, #648]	@ (8001264 <HAL_RCC_OscConfig+0x340>)
 8000fda:	400a      	ands	r2, r1
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	4ba0      	ldr	r3, [pc, #640]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	2380      	movs	r3, #128	@ 0x80
 8000fe4:	025b      	lsls	r3, r3, #9
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	4b9c      	ldr	r3, [pc, #624]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b9b      	ldr	r3, [pc, #620]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 8000ff2:	499d      	ldr	r1, [pc, #628]	@ (8001268 <HAL_RCC_OscConfig+0x344>)
 8000ff4:	400a      	ands	r2, r1
 8000ff6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d015      	beq.n	800102c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001000:	f7ff fcf6 	bl	80009f0 <HAL_GetTick>
 8001004:	0003      	movs	r3, r0
 8001006:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001008:	e009      	b.n	800101e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800100a:	f7ff fcf1 	bl	80009f0 <HAL_GetTick>
 800100e:	0002      	movs	r2, r0
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	2b64      	cmp	r3, #100	@ 0x64
 8001016:	d902      	bls.n	800101e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001018:	2303      	movs	r3, #3
 800101a:	f000 fb4c 	bl	80016b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800101e:	4b90      	ldr	r3, [pc, #576]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	2380      	movs	r3, #128	@ 0x80
 8001024:	029b      	lsls	r3, r3, #10
 8001026:	4013      	ands	r3, r2
 8001028:	d0ef      	beq.n	800100a <HAL_RCC_OscConfig+0xe6>
 800102a:	e015      	b.n	8001058 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102c:	f7ff fce0 	bl	80009f0 <HAL_GetTick>
 8001030:	0003      	movs	r3, r0
 8001032:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001034:	e008      	b.n	8001048 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001036:	f7ff fcdb 	bl	80009f0 <HAL_GetTick>
 800103a:	0002      	movs	r2, r0
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b64      	cmp	r3, #100	@ 0x64
 8001042:	d901      	bls.n	8001048 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e336      	b.n	80016b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001048:	4b85      	ldr	r3, [pc, #532]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	2380      	movs	r3, #128	@ 0x80
 800104e:	029b      	lsls	r3, r3, #10
 8001050:	4013      	ands	r3, r2
 8001052:	d1f0      	bne.n	8001036 <HAL_RCC_OscConfig+0x112>
 8001054:	e000      	b.n	8001058 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001056:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2202      	movs	r2, #2
 800105e:	4013      	ands	r3, r2
 8001060:	d100      	bne.n	8001064 <HAL_RCC_OscConfig+0x140>
 8001062:	e099      	b.n	8001198 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800106a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800106c:	2220      	movs	r2, #32
 800106e:	4013      	ands	r3, r2
 8001070:	d009      	beq.n	8001086 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001072:	4b7b      	ldr	r3, [pc, #492]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	4b7a      	ldr	r3, [pc, #488]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 8001078:	2120      	movs	r1, #32
 800107a:	430a      	orrs	r2, r1
 800107c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800107e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001080:	2220      	movs	r2, #32
 8001082:	4393      	bics	r3, r2
 8001084:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	2b04      	cmp	r3, #4
 800108a:	d005      	beq.n	8001098 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	2b0c      	cmp	r3, #12
 8001090:	d13e      	bne.n	8001110 <HAL_RCC_OscConfig+0x1ec>
 8001092:	69bb      	ldr	r3, [r7, #24]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d13b      	bne.n	8001110 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001098:	4b71      	ldr	r3, [pc, #452]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2204      	movs	r2, #4
 800109e:	4013      	ands	r3, r2
 80010a0:	d004      	beq.n	80010ac <HAL_RCC_OscConfig+0x188>
 80010a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d101      	bne.n	80010ac <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e304      	b.n	80016b6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ac:	4b6c      	ldr	r3, [pc, #432]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	4a6e      	ldr	r2, [pc, #440]	@ (800126c <HAL_RCC_OscConfig+0x348>)
 80010b2:	4013      	ands	r3, r2
 80010b4:	0019      	movs	r1, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	691b      	ldr	r3, [r3, #16]
 80010ba:	021a      	lsls	r2, r3, #8
 80010bc:	4b68      	ldr	r3, [pc, #416]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 80010be:	430a      	orrs	r2, r1
 80010c0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80010c2:	4b67      	ldr	r3, [pc, #412]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2209      	movs	r2, #9
 80010c8:	4393      	bics	r3, r2
 80010ca:	0019      	movs	r1, r3
 80010cc:	4b64      	ldr	r3, [pc, #400]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 80010ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010d0:	430a      	orrs	r2, r1
 80010d2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010d4:	f000 fc42 	bl	800195c <HAL_RCC_GetSysClockFreq>
 80010d8:	0001      	movs	r1, r0
 80010da:	4b61      	ldr	r3, [pc, #388]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	091b      	lsrs	r3, r3, #4
 80010e0:	220f      	movs	r2, #15
 80010e2:	4013      	ands	r3, r2
 80010e4:	4a62      	ldr	r2, [pc, #392]	@ (8001270 <HAL_RCC_OscConfig+0x34c>)
 80010e6:	5cd3      	ldrb	r3, [r2, r3]
 80010e8:	000a      	movs	r2, r1
 80010ea:	40da      	lsrs	r2, r3
 80010ec:	4b61      	ldr	r3, [pc, #388]	@ (8001274 <HAL_RCC_OscConfig+0x350>)
 80010ee:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80010f0:	4b61      	ldr	r3, [pc, #388]	@ (8001278 <HAL_RCC_OscConfig+0x354>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2513      	movs	r5, #19
 80010f6:	197c      	adds	r4, r7, r5
 80010f8:	0018      	movs	r0, r3
 80010fa:	f7ff fc33 	bl	8000964 <HAL_InitTick>
 80010fe:	0003      	movs	r3, r0
 8001100:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001102:	197b      	adds	r3, r7, r5
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d046      	beq.n	8001198 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800110a:	197b      	adds	r3, r7, r5
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	e2d2      	b.n	80016b6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001112:	2b00      	cmp	r3, #0
 8001114:	d027      	beq.n	8001166 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001116:	4b52      	ldr	r3, [pc, #328]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2209      	movs	r2, #9
 800111c:	4393      	bics	r3, r2
 800111e:	0019      	movs	r1, r3
 8001120:	4b4f      	ldr	r3, [pc, #316]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 8001122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001124:	430a      	orrs	r2, r1
 8001126:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001128:	f7ff fc62 	bl	80009f0 <HAL_GetTick>
 800112c:	0003      	movs	r3, r0
 800112e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001130:	e008      	b.n	8001144 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001132:	f7ff fc5d 	bl	80009f0 <HAL_GetTick>
 8001136:	0002      	movs	r2, r0
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d901      	bls.n	8001144 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8001140:	2303      	movs	r3, #3
 8001142:	e2b8      	b.n	80016b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001144:	4b46      	ldr	r3, [pc, #280]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2204      	movs	r2, #4
 800114a:	4013      	ands	r3, r2
 800114c:	d0f1      	beq.n	8001132 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800114e:	4b44      	ldr	r3, [pc, #272]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	4a46      	ldr	r2, [pc, #280]	@ (800126c <HAL_RCC_OscConfig+0x348>)
 8001154:	4013      	ands	r3, r2
 8001156:	0019      	movs	r1, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	691b      	ldr	r3, [r3, #16]
 800115c:	021a      	lsls	r2, r3, #8
 800115e:	4b40      	ldr	r3, [pc, #256]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 8001160:	430a      	orrs	r2, r1
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	e018      	b.n	8001198 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001166:	4b3e      	ldr	r3, [pc, #248]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	4b3d      	ldr	r3, [pc, #244]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 800116c:	2101      	movs	r1, #1
 800116e:	438a      	bics	r2, r1
 8001170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001172:	f7ff fc3d 	bl	80009f0 <HAL_GetTick>
 8001176:	0003      	movs	r3, r0
 8001178:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800117c:	f7ff fc38 	bl	80009f0 <HAL_GetTick>
 8001180:	0002      	movs	r2, r0
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e293      	b.n	80016b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800118e:	4b34      	ldr	r3, [pc, #208]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2204      	movs	r2, #4
 8001194:	4013      	ands	r3, r2
 8001196:	d1f1      	bne.n	800117c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2210      	movs	r2, #16
 800119e:	4013      	ands	r3, r2
 80011a0:	d100      	bne.n	80011a4 <HAL_RCC_OscConfig+0x280>
 80011a2:	e0a2      	b.n	80012ea <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d140      	bne.n	800122c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	2380      	movs	r3, #128	@ 0x80
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4013      	ands	r3, r2
 80011b4:	d005      	beq.n	80011c2 <HAL_RCC_OscConfig+0x29e>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69db      	ldr	r3, [r3, #28]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d101      	bne.n	80011c2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e279      	b.n	80016b6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011c2:	4b27      	ldr	r3, [pc, #156]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	4a2d      	ldr	r2, [pc, #180]	@ (800127c <HAL_RCC_OscConfig+0x358>)
 80011c8:	4013      	ands	r3, r2
 80011ca:	0019      	movs	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80011d0:	4b23      	ldr	r3, [pc, #140]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 80011d2:	430a      	orrs	r2, r1
 80011d4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011d6:	4b22      	ldr	r3, [pc, #136]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	021b      	lsls	r3, r3, #8
 80011dc:	0a19      	lsrs	r1, r3, #8
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a1b      	ldr	r3, [r3, #32]
 80011e2:	061a      	lsls	r2, r3, #24
 80011e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 80011e6:	430a      	orrs	r2, r1
 80011e8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ee:	0b5b      	lsrs	r3, r3, #13
 80011f0:	3301      	adds	r3, #1
 80011f2:	2280      	movs	r2, #128	@ 0x80
 80011f4:	0212      	lsls	r2, r2, #8
 80011f6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80011f8:	4b19      	ldr	r3, [pc, #100]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	091b      	lsrs	r3, r3, #4
 80011fe:	210f      	movs	r1, #15
 8001200:	400b      	ands	r3, r1
 8001202:	491b      	ldr	r1, [pc, #108]	@ (8001270 <HAL_RCC_OscConfig+0x34c>)
 8001204:	5ccb      	ldrb	r3, [r1, r3]
 8001206:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001208:	4b1a      	ldr	r3, [pc, #104]	@ (8001274 <HAL_RCC_OscConfig+0x350>)
 800120a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800120c:	4b1a      	ldr	r3, [pc, #104]	@ (8001278 <HAL_RCC_OscConfig+0x354>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2513      	movs	r5, #19
 8001212:	197c      	adds	r4, r7, r5
 8001214:	0018      	movs	r0, r3
 8001216:	f7ff fba5 	bl	8000964 <HAL_InitTick>
 800121a:	0003      	movs	r3, r0
 800121c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800121e:	197b      	adds	r3, r7, r5
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d061      	beq.n	80012ea <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8001226:	197b      	adds	r3, r7, r5
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	e244      	b.n	80016b6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	69db      	ldr	r3, [r3, #28]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d040      	beq.n	80012b6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001234:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <HAL_RCC_OscConfig+0x33c>)
 800123a:	2180      	movs	r1, #128	@ 0x80
 800123c:	0049      	lsls	r1, r1, #1
 800123e:	430a      	orrs	r2, r1
 8001240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001242:	f7ff fbd5 	bl	80009f0 <HAL_GetTick>
 8001246:	0003      	movs	r3, r0
 8001248:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800124a:	e019      	b.n	8001280 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800124c:	f7ff fbd0 	bl	80009f0 <HAL_GetTick>
 8001250:	0002      	movs	r2, r0
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d912      	bls.n	8001280 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e22b      	b.n	80016b6 <HAL_RCC_OscConfig+0x792>
 800125e:	46c0      	nop			@ (mov r8, r8)
 8001260:	40021000 	.word	0x40021000
 8001264:	fffeffff 	.word	0xfffeffff
 8001268:	fffbffff 	.word	0xfffbffff
 800126c:	ffffe0ff 	.word	0xffffe0ff
 8001270:	08001b30 	.word	0x08001b30
 8001274:	20000048 	.word	0x20000048
 8001278:	2000004c 	.word	0x2000004c
 800127c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001280:	4bca      	ldr	r3, [pc, #808]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	2380      	movs	r3, #128	@ 0x80
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	4013      	ands	r3, r2
 800128a:	d0df      	beq.n	800124c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800128c:	4bc7      	ldr	r3, [pc, #796]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	4ac7      	ldr	r2, [pc, #796]	@ (80015b0 <HAL_RCC_OscConfig+0x68c>)
 8001292:	4013      	ands	r3, r2
 8001294:	0019      	movs	r1, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800129a:	4bc4      	ldr	r3, [pc, #784]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 800129c:	430a      	orrs	r2, r1
 800129e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012a0:	4bc2      	ldr	r3, [pc, #776]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	021b      	lsls	r3, r3, #8
 80012a6:	0a19      	lsrs	r1, r3, #8
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a1b      	ldr	r3, [r3, #32]
 80012ac:	061a      	lsls	r2, r3, #24
 80012ae:	4bbf      	ldr	r3, [pc, #764]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 80012b0:	430a      	orrs	r2, r1
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	e019      	b.n	80012ea <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012b6:	4bbd      	ldr	r3, [pc, #756]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4bbc      	ldr	r3, [pc, #752]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 80012bc:	49bd      	ldr	r1, [pc, #756]	@ (80015b4 <HAL_RCC_OscConfig+0x690>)
 80012be:	400a      	ands	r2, r1
 80012c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c2:	f7ff fb95 	bl	80009f0 <HAL_GetTick>
 80012c6:	0003      	movs	r3, r0
 80012c8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012cc:	f7ff fb90 	bl	80009f0 <HAL_GetTick>
 80012d0:	0002      	movs	r2, r0
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e1eb      	b.n	80016b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80012de:	4bb3      	ldr	r3, [pc, #716]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	2380      	movs	r3, #128	@ 0x80
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4013      	ands	r3, r2
 80012e8:	d1f0      	bne.n	80012cc <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2208      	movs	r2, #8
 80012f0:	4013      	ands	r3, r2
 80012f2:	d036      	beq.n	8001362 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d019      	beq.n	8001330 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012fc:	4bab      	ldr	r3, [pc, #684]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 80012fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001300:	4baa      	ldr	r3, [pc, #680]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 8001302:	2101      	movs	r1, #1
 8001304:	430a      	orrs	r2, r1
 8001306:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001308:	f7ff fb72 	bl	80009f0 <HAL_GetTick>
 800130c:	0003      	movs	r3, r0
 800130e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001312:	f7ff fb6d 	bl	80009f0 <HAL_GetTick>
 8001316:	0002      	movs	r2, r0
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e1c8      	b.n	80016b6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001324:	4ba1      	ldr	r3, [pc, #644]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 8001326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001328:	2202      	movs	r2, #2
 800132a:	4013      	ands	r3, r2
 800132c:	d0f1      	beq.n	8001312 <HAL_RCC_OscConfig+0x3ee>
 800132e:	e018      	b.n	8001362 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001330:	4b9e      	ldr	r3, [pc, #632]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 8001332:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001334:	4b9d      	ldr	r3, [pc, #628]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 8001336:	2101      	movs	r1, #1
 8001338:	438a      	bics	r2, r1
 800133a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133c:	f7ff fb58 	bl	80009f0 <HAL_GetTick>
 8001340:	0003      	movs	r3, r0
 8001342:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001346:	f7ff fb53 	bl	80009f0 <HAL_GetTick>
 800134a:	0002      	movs	r2, r0
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e1ae      	b.n	80016b6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001358:	4b94      	ldr	r3, [pc, #592]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 800135a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800135c:	2202      	movs	r2, #2
 800135e:	4013      	ands	r3, r2
 8001360:	d1f1      	bne.n	8001346 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2204      	movs	r2, #4
 8001368:	4013      	ands	r3, r2
 800136a:	d100      	bne.n	800136e <HAL_RCC_OscConfig+0x44a>
 800136c:	e0ae      	b.n	80014cc <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800136e:	2023      	movs	r0, #35	@ 0x23
 8001370:	183b      	adds	r3, r7, r0
 8001372:	2200      	movs	r2, #0
 8001374:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001376:	4b8d      	ldr	r3, [pc, #564]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 8001378:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800137a:	2380      	movs	r3, #128	@ 0x80
 800137c:	055b      	lsls	r3, r3, #21
 800137e:	4013      	ands	r3, r2
 8001380:	d109      	bne.n	8001396 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	4b8a      	ldr	r3, [pc, #552]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 8001384:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001386:	4b89      	ldr	r3, [pc, #548]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 8001388:	2180      	movs	r1, #128	@ 0x80
 800138a:	0549      	lsls	r1, r1, #21
 800138c:	430a      	orrs	r2, r1
 800138e:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001390:	183b      	adds	r3, r7, r0
 8001392:	2201      	movs	r2, #1
 8001394:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001396:	4b88      	ldr	r3, [pc, #544]	@ (80015b8 <HAL_RCC_OscConfig+0x694>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	2380      	movs	r3, #128	@ 0x80
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	4013      	ands	r3, r2
 80013a0:	d11a      	bne.n	80013d8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013a2:	4b85      	ldr	r3, [pc, #532]	@ (80015b8 <HAL_RCC_OscConfig+0x694>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4b84      	ldr	r3, [pc, #528]	@ (80015b8 <HAL_RCC_OscConfig+0x694>)
 80013a8:	2180      	movs	r1, #128	@ 0x80
 80013aa:	0049      	lsls	r1, r1, #1
 80013ac:	430a      	orrs	r2, r1
 80013ae:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013b0:	f7ff fb1e 	bl	80009f0 <HAL_GetTick>
 80013b4:	0003      	movs	r3, r0
 80013b6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ba:	f7ff fb19 	bl	80009f0 <HAL_GetTick>
 80013be:	0002      	movs	r2, r0
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b64      	cmp	r3, #100	@ 0x64
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e174      	b.n	80016b6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013cc:	4b7a      	ldr	r3, [pc, #488]	@ (80015b8 <HAL_RCC_OscConfig+0x694>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	2380      	movs	r3, #128	@ 0x80
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	4013      	ands	r3, r2
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	2380      	movs	r3, #128	@ 0x80
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d107      	bne.n	80013f4 <HAL_RCC_OscConfig+0x4d0>
 80013e4:	4b71      	ldr	r3, [pc, #452]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 80013e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80013e8:	4b70      	ldr	r3, [pc, #448]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 80013ea:	2180      	movs	r1, #128	@ 0x80
 80013ec:	0049      	lsls	r1, r1, #1
 80013ee:	430a      	orrs	r2, r1
 80013f0:	651a      	str	r2, [r3, #80]	@ 0x50
 80013f2:	e031      	b.n	8001458 <HAL_RCC_OscConfig+0x534>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d10c      	bne.n	8001416 <HAL_RCC_OscConfig+0x4f2>
 80013fc:	4b6b      	ldr	r3, [pc, #428]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 80013fe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001400:	4b6a      	ldr	r3, [pc, #424]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 8001402:	496c      	ldr	r1, [pc, #432]	@ (80015b4 <HAL_RCC_OscConfig+0x690>)
 8001404:	400a      	ands	r2, r1
 8001406:	651a      	str	r2, [r3, #80]	@ 0x50
 8001408:	4b68      	ldr	r3, [pc, #416]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 800140a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800140c:	4b67      	ldr	r3, [pc, #412]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 800140e:	496b      	ldr	r1, [pc, #428]	@ (80015bc <HAL_RCC_OscConfig+0x698>)
 8001410:	400a      	ands	r2, r1
 8001412:	651a      	str	r2, [r3, #80]	@ 0x50
 8001414:	e020      	b.n	8001458 <HAL_RCC_OscConfig+0x534>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	23a0      	movs	r3, #160	@ 0xa0
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	429a      	cmp	r2, r3
 8001420:	d10e      	bne.n	8001440 <HAL_RCC_OscConfig+0x51c>
 8001422:	4b62      	ldr	r3, [pc, #392]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 8001424:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001426:	4b61      	ldr	r3, [pc, #388]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 8001428:	2180      	movs	r1, #128	@ 0x80
 800142a:	00c9      	lsls	r1, r1, #3
 800142c:	430a      	orrs	r2, r1
 800142e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001430:	4b5e      	ldr	r3, [pc, #376]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 8001432:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001434:	4b5d      	ldr	r3, [pc, #372]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 8001436:	2180      	movs	r1, #128	@ 0x80
 8001438:	0049      	lsls	r1, r1, #1
 800143a:	430a      	orrs	r2, r1
 800143c:	651a      	str	r2, [r3, #80]	@ 0x50
 800143e:	e00b      	b.n	8001458 <HAL_RCC_OscConfig+0x534>
 8001440:	4b5a      	ldr	r3, [pc, #360]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 8001442:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001444:	4b59      	ldr	r3, [pc, #356]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 8001446:	495b      	ldr	r1, [pc, #364]	@ (80015b4 <HAL_RCC_OscConfig+0x690>)
 8001448:	400a      	ands	r2, r1
 800144a:	651a      	str	r2, [r3, #80]	@ 0x50
 800144c:	4b57      	ldr	r3, [pc, #348]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 800144e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001450:	4b56      	ldr	r3, [pc, #344]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 8001452:	495a      	ldr	r1, [pc, #360]	@ (80015bc <HAL_RCC_OscConfig+0x698>)
 8001454:	400a      	ands	r2, r1
 8001456:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d015      	beq.n	800148c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001460:	f7ff fac6 	bl	80009f0 <HAL_GetTick>
 8001464:	0003      	movs	r3, r0
 8001466:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001468:	e009      	b.n	800147e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800146a:	f7ff fac1 	bl	80009f0 <HAL_GetTick>
 800146e:	0002      	movs	r2, r0
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	4a52      	ldr	r2, [pc, #328]	@ (80015c0 <HAL_RCC_OscConfig+0x69c>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e11b      	b.n	80016b6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800147e:	4b4b      	ldr	r3, [pc, #300]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 8001480:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001482:	2380      	movs	r3, #128	@ 0x80
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4013      	ands	r3, r2
 8001488:	d0ef      	beq.n	800146a <HAL_RCC_OscConfig+0x546>
 800148a:	e014      	b.n	80014b6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800148c:	f7ff fab0 	bl	80009f0 <HAL_GetTick>
 8001490:	0003      	movs	r3, r0
 8001492:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001494:	e009      	b.n	80014aa <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001496:	f7ff faab 	bl	80009f0 <HAL_GetTick>
 800149a:	0002      	movs	r2, r0
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	4a47      	ldr	r2, [pc, #284]	@ (80015c0 <HAL_RCC_OscConfig+0x69c>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e105      	b.n	80016b6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014aa:	4b40      	ldr	r3, [pc, #256]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 80014ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80014ae:	2380      	movs	r3, #128	@ 0x80
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4013      	ands	r3, r2
 80014b4:	d1ef      	bne.n	8001496 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014b6:	2323      	movs	r3, #35	@ 0x23
 80014b8:	18fb      	adds	r3, r7, r3
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d105      	bne.n	80014cc <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014c0:	4b3a      	ldr	r3, [pc, #232]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 80014c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80014c4:	4b39      	ldr	r3, [pc, #228]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 80014c6:	493f      	ldr	r1, [pc, #252]	@ (80015c4 <HAL_RCC_OscConfig+0x6a0>)
 80014c8:	400a      	ands	r2, r1
 80014ca:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2220      	movs	r2, #32
 80014d2:	4013      	ands	r3, r2
 80014d4:	d049      	beq.n	800156a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d026      	beq.n	800152c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80014de:	4b33      	ldr	r3, [pc, #204]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	4b32      	ldr	r3, [pc, #200]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 80014e4:	2101      	movs	r1, #1
 80014e6:	430a      	orrs	r2, r1
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	4b30      	ldr	r3, [pc, #192]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 80014ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014ee:	4b2f      	ldr	r3, [pc, #188]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 80014f0:	2101      	movs	r1, #1
 80014f2:	430a      	orrs	r2, r1
 80014f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80014f6:	4b34      	ldr	r3, [pc, #208]	@ (80015c8 <HAL_RCC_OscConfig+0x6a4>)
 80014f8:	6a1a      	ldr	r2, [r3, #32]
 80014fa:	4b33      	ldr	r3, [pc, #204]	@ (80015c8 <HAL_RCC_OscConfig+0x6a4>)
 80014fc:	2180      	movs	r1, #128	@ 0x80
 80014fe:	0189      	lsls	r1, r1, #6
 8001500:	430a      	orrs	r2, r1
 8001502:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001504:	f7ff fa74 	bl	80009f0 <HAL_GetTick>
 8001508:	0003      	movs	r3, r0
 800150a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800150e:	f7ff fa6f 	bl	80009f0 <HAL_GetTick>
 8001512:	0002      	movs	r2, r0
 8001514:	697b      	ldr	r3, [r7, #20]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e0ca      	b.n	80016b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001520:	4b22      	ldr	r3, [pc, #136]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2202      	movs	r2, #2
 8001526:	4013      	ands	r3, r2
 8001528:	d0f1      	beq.n	800150e <HAL_RCC_OscConfig+0x5ea>
 800152a:	e01e      	b.n	800156a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800152c:	4b1f      	ldr	r3, [pc, #124]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	4b1e      	ldr	r3, [pc, #120]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 8001532:	2101      	movs	r1, #1
 8001534:	438a      	bics	r2, r1
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	4b23      	ldr	r3, [pc, #140]	@ (80015c8 <HAL_RCC_OscConfig+0x6a4>)
 800153a:	6a1a      	ldr	r2, [r3, #32]
 800153c:	4b22      	ldr	r3, [pc, #136]	@ (80015c8 <HAL_RCC_OscConfig+0x6a4>)
 800153e:	4923      	ldr	r1, [pc, #140]	@ (80015cc <HAL_RCC_OscConfig+0x6a8>)
 8001540:	400a      	ands	r2, r1
 8001542:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001544:	f7ff fa54 	bl	80009f0 <HAL_GetTick>
 8001548:	0003      	movs	r3, r0
 800154a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800154e:	f7ff fa4f 	bl	80009f0 <HAL_GetTick>
 8001552:	0002      	movs	r2, r0
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e0aa      	b.n	80016b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001560:	4b12      	ldr	r3, [pc, #72]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	2202      	movs	r2, #2
 8001566:	4013      	ands	r3, r2
 8001568:	d1f1      	bne.n	800154e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800156e:	2b00      	cmp	r3, #0
 8001570:	d100      	bne.n	8001574 <HAL_RCC_OscConfig+0x650>
 8001572:	e09f      	b.n	80016b4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	2b0c      	cmp	r3, #12
 8001578:	d100      	bne.n	800157c <HAL_RCC_OscConfig+0x658>
 800157a:	e078      	b.n	800166e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001580:	2b02      	cmp	r3, #2
 8001582:	d159      	bne.n	8001638 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001584:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4b08      	ldr	r3, [pc, #32]	@ (80015ac <HAL_RCC_OscConfig+0x688>)
 800158a:	4911      	ldr	r1, [pc, #68]	@ (80015d0 <HAL_RCC_OscConfig+0x6ac>)
 800158c:	400a      	ands	r2, r1
 800158e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7ff fa2e 	bl	80009f0 <HAL_GetTick>
 8001594:	0003      	movs	r3, r0
 8001596:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001598:	e01c      	b.n	80015d4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800159a:	f7ff fa29 	bl	80009f0 <HAL_GetTick>
 800159e:	0002      	movs	r2, r0
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d915      	bls.n	80015d4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e084      	b.n	80016b6 <HAL_RCC_OscConfig+0x792>
 80015ac:	40021000 	.word	0x40021000
 80015b0:	ffff1fff 	.word	0xffff1fff
 80015b4:	fffffeff 	.word	0xfffffeff
 80015b8:	40007000 	.word	0x40007000
 80015bc:	fffffbff 	.word	0xfffffbff
 80015c0:	00001388 	.word	0x00001388
 80015c4:	efffffff 	.word	0xefffffff
 80015c8:	40010000 	.word	0x40010000
 80015cc:	ffffdfff 	.word	0xffffdfff
 80015d0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015d4:	4b3a      	ldr	r3, [pc, #232]	@ (80016c0 <HAL_RCC_OscConfig+0x79c>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	2380      	movs	r3, #128	@ 0x80
 80015da:	049b      	lsls	r3, r3, #18
 80015dc:	4013      	ands	r3, r2
 80015de:	d1dc      	bne.n	800159a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015e0:	4b37      	ldr	r3, [pc, #220]	@ (80016c0 <HAL_RCC_OscConfig+0x79c>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	4a37      	ldr	r2, [pc, #220]	@ (80016c4 <HAL_RCC_OscConfig+0x7a0>)
 80015e6:	4013      	ands	r3, r2
 80015e8:	0019      	movs	r1, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	431a      	orrs	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015f8:	431a      	orrs	r2, r3
 80015fa:	4b31      	ldr	r3, [pc, #196]	@ (80016c0 <HAL_RCC_OscConfig+0x79c>)
 80015fc:	430a      	orrs	r2, r1
 80015fe:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001600:	4b2f      	ldr	r3, [pc, #188]	@ (80016c0 <HAL_RCC_OscConfig+0x79c>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	4b2e      	ldr	r3, [pc, #184]	@ (80016c0 <HAL_RCC_OscConfig+0x79c>)
 8001606:	2180      	movs	r1, #128	@ 0x80
 8001608:	0449      	lsls	r1, r1, #17
 800160a:	430a      	orrs	r2, r1
 800160c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160e:	f7ff f9ef 	bl	80009f0 <HAL_GetTick>
 8001612:	0003      	movs	r3, r0
 8001614:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001618:	f7ff f9ea 	bl	80009f0 <HAL_GetTick>
 800161c:	0002      	movs	r2, r0
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e045      	b.n	80016b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800162a:	4b25      	ldr	r3, [pc, #148]	@ (80016c0 <HAL_RCC_OscConfig+0x79c>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	2380      	movs	r3, #128	@ 0x80
 8001630:	049b      	lsls	r3, r3, #18
 8001632:	4013      	ands	r3, r2
 8001634:	d0f0      	beq.n	8001618 <HAL_RCC_OscConfig+0x6f4>
 8001636:	e03d      	b.n	80016b4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001638:	4b21      	ldr	r3, [pc, #132]	@ (80016c0 <HAL_RCC_OscConfig+0x79c>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b20      	ldr	r3, [pc, #128]	@ (80016c0 <HAL_RCC_OscConfig+0x79c>)
 800163e:	4922      	ldr	r1, [pc, #136]	@ (80016c8 <HAL_RCC_OscConfig+0x7a4>)
 8001640:	400a      	ands	r2, r1
 8001642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff f9d4 	bl	80009f0 <HAL_GetTick>
 8001648:	0003      	movs	r3, r0
 800164a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164e:	f7ff f9cf 	bl	80009f0 <HAL_GetTick>
 8001652:	0002      	movs	r2, r0
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e02a      	b.n	80016b6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001660:	4b17      	ldr	r3, [pc, #92]	@ (80016c0 <HAL_RCC_OscConfig+0x79c>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	2380      	movs	r3, #128	@ 0x80
 8001666:	049b      	lsls	r3, r3, #18
 8001668:	4013      	ands	r3, r2
 800166a:	d1f0      	bne.n	800164e <HAL_RCC_OscConfig+0x72a>
 800166c:	e022      	b.n	80016b4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001672:	2b01      	cmp	r3, #1
 8001674:	d101      	bne.n	800167a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e01d      	b.n	80016b6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800167a:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <HAL_RCC_OscConfig+0x79c>)
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	2380      	movs	r3, #128	@ 0x80
 8001684:	025b      	lsls	r3, r3, #9
 8001686:	401a      	ands	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800168c:	429a      	cmp	r2, r3
 800168e:	d10f      	bne.n	80016b0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	23f0      	movs	r3, #240	@ 0xf0
 8001694:	039b      	lsls	r3, r3, #14
 8001696:	401a      	ands	r2, r3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800169c:	429a      	cmp	r2, r3
 800169e:	d107      	bne.n	80016b0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	23c0      	movs	r3, #192	@ 0xc0
 80016a4:	041b      	lsls	r3, r3, #16
 80016a6:	401a      	ands	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d001      	beq.n	80016b4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e000      	b.n	80016b6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	0018      	movs	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	b00a      	add	sp, #40	@ 0x28
 80016bc:	bdb0      	pop	{r4, r5, r7, pc}
 80016be:	46c0      	nop			@ (mov r8, r8)
 80016c0:	40021000 	.word	0x40021000
 80016c4:	ff02ffff 	.word	0xff02ffff
 80016c8:	feffffff 	.word	0xfeffffff

080016cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016cc:	b5b0      	push	{r4, r5, r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d101      	bne.n	80016e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e128      	b.n	8001932 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016e0:	4b96      	ldr	r3, [pc, #600]	@ (800193c <HAL_RCC_ClockConfig+0x270>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2201      	movs	r2, #1
 80016e6:	4013      	ands	r3, r2
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d91e      	bls.n	800172c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ee:	4b93      	ldr	r3, [pc, #588]	@ (800193c <HAL_RCC_ClockConfig+0x270>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2201      	movs	r2, #1
 80016f4:	4393      	bics	r3, r2
 80016f6:	0019      	movs	r1, r3
 80016f8:	4b90      	ldr	r3, [pc, #576]	@ (800193c <HAL_RCC_ClockConfig+0x270>)
 80016fa:	683a      	ldr	r2, [r7, #0]
 80016fc:	430a      	orrs	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001700:	f7ff f976 	bl	80009f0 <HAL_GetTick>
 8001704:	0003      	movs	r3, r0
 8001706:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001708:	e009      	b.n	800171e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800170a:	f7ff f971 	bl	80009f0 <HAL_GetTick>
 800170e:	0002      	movs	r2, r0
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	4a8a      	ldr	r2, [pc, #552]	@ (8001940 <HAL_RCC_ClockConfig+0x274>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d901      	bls.n	800171e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e109      	b.n	8001932 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800171e:	4b87      	ldr	r3, [pc, #540]	@ (800193c <HAL_RCC_ClockConfig+0x270>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2201      	movs	r2, #1
 8001724:	4013      	ands	r3, r2
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	429a      	cmp	r2, r3
 800172a:	d1ee      	bne.n	800170a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2202      	movs	r2, #2
 8001732:	4013      	ands	r3, r2
 8001734:	d009      	beq.n	800174a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001736:	4b83      	ldr	r3, [pc, #524]	@ (8001944 <HAL_RCC_ClockConfig+0x278>)
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	22f0      	movs	r2, #240	@ 0xf0
 800173c:	4393      	bics	r3, r2
 800173e:	0019      	movs	r1, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	4b7f      	ldr	r3, [pc, #508]	@ (8001944 <HAL_RCC_ClockConfig+0x278>)
 8001746:	430a      	orrs	r2, r1
 8001748:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2201      	movs	r2, #1
 8001750:	4013      	ands	r3, r2
 8001752:	d100      	bne.n	8001756 <HAL_RCC_ClockConfig+0x8a>
 8001754:	e089      	b.n	800186a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d107      	bne.n	800176e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800175e:	4b79      	ldr	r3, [pc, #484]	@ (8001944 <HAL_RCC_ClockConfig+0x278>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	2380      	movs	r3, #128	@ 0x80
 8001764:	029b      	lsls	r3, r3, #10
 8001766:	4013      	ands	r3, r2
 8001768:	d120      	bne.n	80017ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e0e1      	b.n	8001932 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b03      	cmp	r3, #3
 8001774:	d107      	bne.n	8001786 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001776:	4b73      	ldr	r3, [pc, #460]	@ (8001944 <HAL_RCC_ClockConfig+0x278>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	2380      	movs	r3, #128	@ 0x80
 800177c:	049b      	lsls	r3, r3, #18
 800177e:	4013      	ands	r3, r2
 8001780:	d114      	bne.n	80017ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e0d5      	b.n	8001932 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d106      	bne.n	800179c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800178e:	4b6d      	ldr	r3, [pc, #436]	@ (8001944 <HAL_RCC_ClockConfig+0x278>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2204      	movs	r2, #4
 8001794:	4013      	ands	r3, r2
 8001796:	d109      	bne.n	80017ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e0ca      	b.n	8001932 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800179c:	4b69      	ldr	r3, [pc, #420]	@ (8001944 <HAL_RCC_ClockConfig+0x278>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	2380      	movs	r3, #128	@ 0x80
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4013      	ands	r3, r2
 80017a6:	d101      	bne.n	80017ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e0c2      	b.n	8001932 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ac:	4b65      	ldr	r3, [pc, #404]	@ (8001944 <HAL_RCC_ClockConfig+0x278>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	2203      	movs	r2, #3
 80017b2:	4393      	bics	r3, r2
 80017b4:	0019      	movs	r1, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	4b62      	ldr	r3, [pc, #392]	@ (8001944 <HAL_RCC_ClockConfig+0x278>)
 80017bc:	430a      	orrs	r2, r1
 80017be:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017c0:	f7ff f916 	bl	80009f0 <HAL_GetTick>
 80017c4:	0003      	movs	r3, r0
 80017c6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d111      	bne.n	80017f4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017d0:	e009      	b.n	80017e6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d2:	f7ff f90d 	bl	80009f0 <HAL_GetTick>
 80017d6:	0002      	movs	r2, r0
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	4a58      	ldr	r2, [pc, #352]	@ (8001940 <HAL_RCC_ClockConfig+0x274>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e0a5      	b.n	8001932 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017e6:	4b57      	ldr	r3, [pc, #348]	@ (8001944 <HAL_RCC_ClockConfig+0x278>)
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	220c      	movs	r2, #12
 80017ec:	4013      	ands	r3, r2
 80017ee:	2b08      	cmp	r3, #8
 80017f0:	d1ef      	bne.n	80017d2 <HAL_RCC_ClockConfig+0x106>
 80017f2:	e03a      	b.n	800186a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b03      	cmp	r3, #3
 80017fa:	d111      	bne.n	8001820 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017fc:	e009      	b.n	8001812 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017fe:	f7ff f8f7 	bl	80009f0 <HAL_GetTick>
 8001802:	0002      	movs	r2, r0
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	4a4d      	ldr	r2, [pc, #308]	@ (8001940 <HAL_RCC_ClockConfig+0x274>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e08f      	b.n	8001932 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001812:	4b4c      	ldr	r3, [pc, #304]	@ (8001944 <HAL_RCC_ClockConfig+0x278>)
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	220c      	movs	r2, #12
 8001818:	4013      	ands	r3, r2
 800181a:	2b0c      	cmp	r3, #12
 800181c:	d1ef      	bne.n	80017fe <HAL_RCC_ClockConfig+0x132>
 800181e:	e024      	b.n	800186a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d11b      	bne.n	8001860 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001828:	e009      	b.n	800183e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800182a:	f7ff f8e1 	bl	80009f0 <HAL_GetTick>
 800182e:	0002      	movs	r2, r0
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	4a42      	ldr	r2, [pc, #264]	@ (8001940 <HAL_RCC_ClockConfig+0x274>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d901      	bls.n	800183e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e079      	b.n	8001932 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800183e:	4b41      	ldr	r3, [pc, #260]	@ (8001944 <HAL_RCC_ClockConfig+0x278>)
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	220c      	movs	r2, #12
 8001844:	4013      	ands	r3, r2
 8001846:	2b04      	cmp	r3, #4
 8001848:	d1ef      	bne.n	800182a <HAL_RCC_ClockConfig+0x15e>
 800184a:	e00e      	b.n	800186a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800184c:	f7ff f8d0 	bl	80009f0 <HAL_GetTick>
 8001850:	0002      	movs	r2, r0
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	4a3a      	ldr	r2, [pc, #232]	@ (8001940 <HAL_RCC_ClockConfig+0x274>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e068      	b.n	8001932 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001860:	4b38      	ldr	r3, [pc, #224]	@ (8001944 <HAL_RCC_ClockConfig+0x278>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	220c      	movs	r2, #12
 8001866:	4013      	ands	r3, r2
 8001868:	d1f0      	bne.n	800184c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800186a:	4b34      	ldr	r3, [pc, #208]	@ (800193c <HAL_RCC_ClockConfig+0x270>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2201      	movs	r2, #1
 8001870:	4013      	ands	r3, r2
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d21e      	bcs.n	80018b6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001878:	4b30      	ldr	r3, [pc, #192]	@ (800193c <HAL_RCC_ClockConfig+0x270>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2201      	movs	r2, #1
 800187e:	4393      	bics	r3, r2
 8001880:	0019      	movs	r1, r3
 8001882:	4b2e      	ldr	r3, [pc, #184]	@ (800193c <HAL_RCC_ClockConfig+0x270>)
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	430a      	orrs	r2, r1
 8001888:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800188a:	f7ff f8b1 	bl	80009f0 <HAL_GetTick>
 800188e:	0003      	movs	r3, r0
 8001890:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001892:	e009      	b.n	80018a8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001894:	f7ff f8ac 	bl	80009f0 <HAL_GetTick>
 8001898:	0002      	movs	r2, r0
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	4a28      	ldr	r2, [pc, #160]	@ (8001940 <HAL_RCC_ClockConfig+0x274>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e044      	b.n	8001932 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a8:	4b24      	ldr	r3, [pc, #144]	@ (800193c <HAL_RCC_ClockConfig+0x270>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2201      	movs	r2, #1
 80018ae:	4013      	ands	r3, r2
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d1ee      	bne.n	8001894 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2204      	movs	r2, #4
 80018bc:	4013      	ands	r3, r2
 80018be:	d009      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c0:	4b20      	ldr	r3, [pc, #128]	@ (8001944 <HAL_RCC_ClockConfig+0x278>)
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	4a20      	ldr	r2, [pc, #128]	@ (8001948 <HAL_RCC_ClockConfig+0x27c>)
 80018c6:	4013      	ands	r3, r2
 80018c8:	0019      	movs	r1, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68da      	ldr	r2, [r3, #12]
 80018ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001944 <HAL_RCC_ClockConfig+0x278>)
 80018d0:	430a      	orrs	r2, r1
 80018d2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2208      	movs	r2, #8
 80018da:	4013      	ands	r3, r2
 80018dc:	d00a      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018de:	4b19      	ldr	r3, [pc, #100]	@ (8001944 <HAL_RCC_ClockConfig+0x278>)
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	4a1a      	ldr	r2, [pc, #104]	@ (800194c <HAL_RCC_ClockConfig+0x280>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	0019      	movs	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	00da      	lsls	r2, r3, #3
 80018ee:	4b15      	ldr	r3, [pc, #84]	@ (8001944 <HAL_RCC_ClockConfig+0x278>)
 80018f0:	430a      	orrs	r2, r1
 80018f2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018f4:	f000 f832 	bl	800195c <HAL_RCC_GetSysClockFreq>
 80018f8:	0001      	movs	r1, r0
 80018fa:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <HAL_RCC_ClockConfig+0x278>)
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	091b      	lsrs	r3, r3, #4
 8001900:	220f      	movs	r2, #15
 8001902:	4013      	ands	r3, r2
 8001904:	4a12      	ldr	r2, [pc, #72]	@ (8001950 <HAL_RCC_ClockConfig+0x284>)
 8001906:	5cd3      	ldrb	r3, [r2, r3]
 8001908:	000a      	movs	r2, r1
 800190a:	40da      	lsrs	r2, r3
 800190c:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <HAL_RCC_ClockConfig+0x288>)
 800190e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001910:	4b11      	ldr	r3, [pc, #68]	@ (8001958 <HAL_RCC_ClockConfig+0x28c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	250b      	movs	r5, #11
 8001916:	197c      	adds	r4, r7, r5
 8001918:	0018      	movs	r0, r3
 800191a:	f7ff f823 	bl	8000964 <HAL_InitTick>
 800191e:	0003      	movs	r3, r0
 8001920:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001922:	197b      	adds	r3, r7, r5
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d002      	beq.n	8001930 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800192a:	197b      	adds	r3, r7, r5
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	e000      	b.n	8001932 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	0018      	movs	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	b004      	add	sp, #16
 8001938:	bdb0      	pop	{r4, r5, r7, pc}
 800193a:	46c0      	nop			@ (mov r8, r8)
 800193c:	40022000 	.word	0x40022000
 8001940:	00001388 	.word	0x00001388
 8001944:	40021000 	.word	0x40021000
 8001948:	fffff8ff 	.word	0xfffff8ff
 800194c:	ffffc7ff 	.word	0xffffc7ff
 8001950:	08001b30 	.word	0x08001b30
 8001954:	20000048 	.word	0x20000048
 8001958:	2000004c 	.word	0x2000004c

0800195c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001962:	4b3c      	ldr	r3, [pc, #240]	@ (8001a54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	220c      	movs	r2, #12
 800196c:	4013      	ands	r3, r2
 800196e:	2b0c      	cmp	r3, #12
 8001970:	d013      	beq.n	800199a <HAL_RCC_GetSysClockFreq+0x3e>
 8001972:	d85c      	bhi.n	8001a2e <HAL_RCC_GetSysClockFreq+0xd2>
 8001974:	2b04      	cmp	r3, #4
 8001976:	d002      	beq.n	800197e <HAL_RCC_GetSysClockFreq+0x22>
 8001978:	2b08      	cmp	r3, #8
 800197a:	d00b      	beq.n	8001994 <HAL_RCC_GetSysClockFreq+0x38>
 800197c:	e057      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0xd2>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800197e:	4b35      	ldr	r3, [pc, #212]	@ (8001a54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2210      	movs	r2, #16
 8001984:	4013      	ands	r3, r2
 8001986:	d002      	beq.n	800198e <HAL_RCC_GetSysClockFreq+0x32>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001988:	4b33      	ldr	r3, [pc, #204]	@ (8001a58 <HAL_RCC_GetSysClockFreq+0xfc>)
 800198a:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800198c:	e05d      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0xee>
        sysclockfreq =  HSI_VALUE;
 800198e:	4b33      	ldr	r3, [pc, #204]	@ (8001a5c <HAL_RCC_GetSysClockFreq+0x100>)
 8001990:	613b      	str	r3, [r7, #16]
      break;
 8001992:	e05a      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001994:	4b32      	ldr	r3, [pc, #200]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x104>)
 8001996:	613b      	str	r3, [r7, #16]
      break;
 8001998:	e057      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	0c9b      	lsrs	r3, r3, #18
 800199e:	220f      	movs	r2, #15
 80019a0:	4013      	ands	r3, r2
 80019a2:	4a30      	ldr	r2, [pc, #192]	@ (8001a64 <HAL_RCC_GetSysClockFreq+0x108>)
 80019a4:	5cd3      	ldrb	r3, [r2, r3]
 80019a6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	0d9b      	lsrs	r3, r3, #22
 80019ac:	2203      	movs	r2, #3
 80019ae:	4013      	ands	r3, r2
 80019b0:	3301      	adds	r3, #1
 80019b2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019b4:	4b27      	ldr	r3, [pc, #156]	@ (8001a54 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	2380      	movs	r3, #128	@ 0x80
 80019ba:	025b      	lsls	r3, r3, #9
 80019bc:	4013      	ands	r3, r2
 80019be:	d00f      	beq.n	80019e0 <HAL_RCC_GetSysClockFreq+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((HSE_VALUE * pllm) / plld);
 80019c0:	68b9      	ldr	r1, [r7, #8]
 80019c2:	000a      	movs	r2, r1
 80019c4:	0152      	lsls	r2, r2, #5
 80019c6:	1a52      	subs	r2, r2, r1
 80019c8:	0193      	lsls	r3, r2, #6
 80019ca:	1a9b      	subs	r3, r3, r2
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	185b      	adds	r3, r3, r1
 80019d0:	025b      	lsls	r3, r3, #9
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	0018      	movs	r0, r3
 80019d6:	f7fe fba1 	bl	800011c <__udivsi3>
 80019da:	0003      	movs	r3, r0
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	e023      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0xcc>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80019e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a54 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2210      	movs	r2, #16
 80019e6:	4013      	ands	r3, r2
 80019e8:	d00f      	beq.n	8001a0a <HAL_RCC_GetSysClockFreq+0xae>
        {
          pllvco = (uint32_t)((((HSI_VALUE >> 2)) * pllm) / plld);
 80019ea:	68b9      	ldr	r1, [r7, #8]
 80019ec:	000a      	movs	r2, r1
 80019ee:	0152      	lsls	r2, r2, #5
 80019f0:	1a52      	subs	r2, r2, r1
 80019f2:	0193      	lsls	r3, r2, #6
 80019f4:	1a9b      	subs	r3, r3, r2
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	185b      	adds	r3, r3, r1
 80019fa:	021b      	lsls	r3, r3, #8
 80019fc:	6879      	ldr	r1, [r7, #4]
 80019fe:	0018      	movs	r0, r3
 8001a00:	f7fe fb8c 	bl	800011c <__udivsi3>
 8001a04:	0003      	movs	r3, r0
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	e00e      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0xcc>
        }
        else
        {
         pllvco = (uint32_t)((HSI_VALUE * pllm) / plld);
 8001a0a:	68b9      	ldr	r1, [r7, #8]
 8001a0c:	000a      	movs	r2, r1
 8001a0e:	0152      	lsls	r2, r2, #5
 8001a10:	1a52      	subs	r2, r2, r1
 8001a12:	0193      	lsls	r3, r2, #6
 8001a14:	1a9b      	subs	r3, r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	185b      	adds	r3, r3, r1
 8001a1a:	029b      	lsls	r3, r3, #10
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	0018      	movs	r0, r3
 8001a20:	f7fe fb7c 	bl	800011c <__udivsi3>
 8001a24:	0003      	movs	r3, r0
 8001a26:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	613b      	str	r3, [r7, #16]
      break;
 8001a2c:	e00d      	b.n	8001a4a <HAL_RCC_GetSysClockFreq+0xee>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001a2e:	4b09      	ldr	r3, [pc, #36]	@ (8001a54 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	0b5b      	lsrs	r3, r3, #13
 8001a34:	2207      	movs	r2, #7
 8001a36:	4013      	ands	r3, r2
 8001a38:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	2280      	movs	r2, #128	@ 0x80
 8001a40:	0212      	lsls	r2, r2, #8
 8001a42:	409a      	lsls	r2, r3
 8001a44:	0013      	movs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
      break;
 8001a48:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a4a:	693b      	ldr	r3, [r7, #16]
}
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	b006      	add	sp, #24
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40021000 	.word	0x40021000
 8001a58:	003d0900 	.word	0x003d0900
 8001a5c:	00f42400 	.word	0x00f42400
 8001a60:	007a1200 	.word	0x007a1200
 8001a64:	08001b40 	.word	0x08001b40

08001a68 <memset>:
 8001a68:	0003      	movs	r3, r0
 8001a6a:	1882      	adds	r2, r0, r2
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d100      	bne.n	8001a72 <memset+0xa>
 8001a70:	4770      	bx	lr
 8001a72:	7019      	strb	r1, [r3, #0]
 8001a74:	3301      	adds	r3, #1
 8001a76:	e7f9      	b.n	8001a6c <memset+0x4>

08001a78 <__libc_init_array>:
 8001a78:	b570      	push	{r4, r5, r6, lr}
 8001a7a:	2600      	movs	r6, #0
 8001a7c:	4c0c      	ldr	r4, [pc, #48]	@ (8001ab0 <__libc_init_array+0x38>)
 8001a7e:	4d0d      	ldr	r5, [pc, #52]	@ (8001ab4 <__libc_init_array+0x3c>)
 8001a80:	1b64      	subs	r4, r4, r5
 8001a82:	10a4      	asrs	r4, r4, #2
 8001a84:	42a6      	cmp	r6, r4
 8001a86:	d109      	bne.n	8001a9c <__libc_init_array+0x24>
 8001a88:	2600      	movs	r6, #0
 8001a8a:	f000 f819 	bl	8001ac0 <_init>
 8001a8e:	4c0a      	ldr	r4, [pc, #40]	@ (8001ab8 <__libc_init_array+0x40>)
 8001a90:	4d0a      	ldr	r5, [pc, #40]	@ (8001abc <__libc_init_array+0x44>)
 8001a92:	1b64      	subs	r4, r4, r5
 8001a94:	10a4      	asrs	r4, r4, #2
 8001a96:	42a6      	cmp	r6, r4
 8001a98:	d105      	bne.n	8001aa6 <__libc_init_array+0x2e>
 8001a9a:	bd70      	pop	{r4, r5, r6, pc}
 8001a9c:	00b3      	lsls	r3, r6, #2
 8001a9e:	58eb      	ldr	r3, [r5, r3]
 8001aa0:	4798      	blx	r3
 8001aa2:	3601      	adds	r6, #1
 8001aa4:	e7ee      	b.n	8001a84 <__libc_init_array+0xc>
 8001aa6:	00b3      	lsls	r3, r6, #2
 8001aa8:	58eb      	ldr	r3, [r5, r3]
 8001aaa:	4798      	blx	r3
 8001aac:	3601      	adds	r6, #1
 8001aae:	e7f2      	b.n	8001a96 <__libc_init_array+0x1e>
 8001ab0:	08001b4c 	.word	0x08001b4c
 8001ab4:	08001b4c 	.word	0x08001b4c
 8001ab8:	08001b50 	.word	0x08001b50
 8001abc:	08001b4c 	.word	0x08001b4c

08001ac0 <_init>:
 8001ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ac2:	46c0      	nop			@ (mov r8, r8)
 8001ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ac6:	bc08      	pop	{r3}
 8001ac8:	469e      	mov	lr, r3
 8001aca:	4770      	bx	lr

08001acc <_fini>:
 8001acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ace:	46c0      	nop			@ (mov r8, r8)
 8001ad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ad2:	bc08      	pop	{r3}
 8001ad4:	469e      	mov	lr, r3
 8001ad6:	4770      	bx	lr
